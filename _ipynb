{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spatial Features Vs Urban Footprint Vs Population Size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import csv\n",
    "import scipy.stats as stats\n",
    "from statistics import pstdev\n",
    "from statistics import mean\n",
    "from sklearn.linear_model import ElasticNetCV\n",
    "from sklearn.linear_model import ElasticNet\n",
    "from sklearn.datasets import make_regression\n",
    "from sklearn.preprocessing import scale\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from itertools import product\n",
    "import copy\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read the Features data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "spfeas = pd.read_excel('../data/features/Srilanka_spfeas.xlsx', sheet_name=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "spfeas['gid'] = spfeas['gid'].astype(int)\n",
    "spfeas = spfeas.set_index('gid')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fid</th>\n",
       "      <th>gnd_n</th>\n",
       "      <th>gnd_c</th>\n",
       "      <th>fourier_v2_sc31_mean_mean</th>\n",
       "      <th>fourier_v2_sc31_mean_std</th>\n",
       "      <th>fourier_v2_sc31_mean_sum</th>\n",
       "      <th>fourier_v2_sc31_variance_mean</th>\n",
       "      <th>fourier_v2_sc31_variance_std</th>\n",
       "      <th>fourier_v2_sc31_variance_sum</th>\n",
       "      <th>fourier_v2_sc51_mean_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>sfs_sc71_min_ll_sum</th>\n",
       "      <th>sfs_sc71_roa_mean</th>\n",
       "      <th>sfs_sc71_roa_std</th>\n",
       "      <th>sfs_sc71_roa_sum</th>\n",
       "      <th>sfs_sc71_std_mean</th>\n",
       "      <th>sfs_sc71_std_std</th>\n",
       "      <th>sfs_sc71_std_sum</th>\n",
       "      <th>sfs_sc71_w_mean_mean</th>\n",
       "      <th>sfs_sc71_w_mean_std</th>\n",
       "      <th>sfs_sc71_w_mean_sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>0</td>\n",
       "      <td>Karagaskada South</td>\n",
       "      <td>2148065</td>\n",
       "      <td>69.388822</td>\n",
       "      <td>3.203212</td>\n",
       "      <td>2.375179e+05</td>\n",
       "      <td>18.623078</td>\n",
       "      <td>0.985125</td>\n",
       "      <td>6.374680e+04</td>\n",
       "      <td>78.463793</td>\n",
       "      <td>...</td>\n",
       "      <td>3933</td>\n",
       "      <td>136.394391</td>\n",
       "      <td>0.938602</td>\n",
       "      <td>466878</td>\n",
       "      <td>16.233955</td>\n",
       "      <td>3.648450</td>\n",
       "      <td>55568.828125</td>\n",
       "      <td>1.228705</td>\n",
       "      <td>0.707158</td>\n",
       "      <td>4205.858398</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>564</th>\n",
       "      <td>1</td>\n",
       "      <td>Panvila</td>\n",
       "      <td>2115070</td>\n",
       "      <td>59.471181</td>\n",
       "      <td>7.831063</td>\n",
       "      <td>1.399654e+06</td>\n",
       "      <td>17.069666</td>\n",
       "      <td>2.198242</td>\n",
       "      <td>4.017346e+05</td>\n",
       "      <td>69.620847</td>\n",
       "      <td>...</td>\n",
       "      <td>40076188</td>\n",
       "      <td>137.910516</td>\n",
       "      <td>2.093903</td>\n",
       "      <td>3245724</td>\n",
       "      <td>14.498129</td>\n",
       "      <td>5.118067</td>\n",
       "      <td>341213.468750</td>\n",
       "      <td>2.838843</td>\n",
       "      <td>3.471181</td>\n",
       "      <td>66812.164062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7917</th>\n",
       "      <td>2</td>\n",
       "      <td>Ganepalla</td>\n",
       "      <td>9227135</td>\n",
       "      <td>50.736799</td>\n",
       "      <td>5.697583</td>\n",
       "      <td>3.626159e+06</td>\n",
       "      <td>14.453749</td>\n",
       "      <td>2.114334</td>\n",
       "      <td>1.033009e+06</td>\n",
       "      <td>60.716923</td>\n",
       "      <td>...</td>\n",
       "      <td>7900571136</td>\n",
       "      <td>139.556597</td>\n",
       "      <td>2.014015</td>\n",
       "      <td>9974110</td>\n",
       "      <td>9.856942</td>\n",
       "      <td>7.202832</td>\n",
       "      <td>704475.625000</td>\n",
       "      <td>3.388618</td>\n",
       "      <td>5.864246</td>\n",
       "      <td>242184.515625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2263</th>\n",
       "      <td>3</td>\n",
       "      <td>Akkaraipattu 11</td>\n",
       "      <td>5236065</td>\n",
       "      <td>73.662439</td>\n",
       "      <td>1.809957</td>\n",
       "      <td>9.745541e+04</td>\n",
       "      <td>18.855526</td>\n",
       "      <td>1.246785</td>\n",
       "      <td>2.494586e+04</td>\n",
       "      <td>82.547466</td>\n",
       "      <td>...</td>\n",
       "      <td>1331</td>\n",
       "      <td>136.077853</td>\n",
       "      <td>0.267941</td>\n",
       "      <td>180031</td>\n",
       "      <td>10.558998</td>\n",
       "      <td>4.329045</td>\n",
       "      <td>13969.554688</td>\n",
       "      <td>0.514668</td>\n",
       "      <td>0.239074</td>\n",
       "      <td>680.906372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>4</td>\n",
       "      <td>Delgasthenna</td>\n",
       "      <td>2109125</td>\n",
       "      <td>66.871213</td>\n",
       "      <td>2.745255</td>\n",
       "      <td>2.654118e+05</td>\n",
       "      <td>18.704186</td>\n",
       "      <td>1.010429</td>\n",
       "      <td>7.423691e+04</td>\n",
       "      <td>75.940020</td>\n",
       "      <td>...</td>\n",
       "      <td>4809</td>\n",
       "      <td>136.681028</td>\n",
       "      <td>1.377590</td>\n",
       "      <td>542487</td>\n",
       "      <td>15.218429</td>\n",
       "      <td>4.465160</td>\n",
       "      <td>60401.945312</td>\n",
       "      <td>1.180995</td>\n",
       "      <td>0.868924</td>\n",
       "      <td>4687.369141</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 426 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      fid              gnd_n    gnd_c  fourier_v2_sc31_mean_mean  \\\n",
       "gid                                                                \n",
       "43      0  Karagaskada South  2148065                  69.388822   \n",
       "564     1            Panvila  2115070                  59.471181   \n",
       "7917    2          Ganepalla  9227135                  50.736799   \n",
       "2263    3    Akkaraipattu 11  5236065                  73.662439   \n",
       "8       4       Delgasthenna  2109125                  66.871213   \n",
       "\n",
       "      fourier_v2_sc31_mean_std  fourier_v2_sc31_mean_sum  \\\n",
       "gid                                                        \n",
       "43                    3.203212              2.375179e+05   \n",
       "564                   7.831063              1.399654e+06   \n",
       "7917                  5.697583              3.626159e+06   \n",
       "2263                  1.809957              9.745541e+04   \n",
       "8                     2.745255              2.654118e+05   \n",
       "\n",
       "      fourier_v2_sc31_variance_mean  fourier_v2_sc31_variance_std  \\\n",
       "gid                                                                 \n",
       "43                        18.623078                      0.985125   \n",
       "564                       17.069666                      2.198242   \n",
       "7917                      14.453749                      2.114334   \n",
       "2263                      18.855526                      1.246785   \n",
       "8                         18.704186                      1.010429   \n",
       "\n",
       "      fourier_v2_sc31_variance_sum  fourier_v2_sc51_mean_mean  ...  \\\n",
       "gid                                                            ...   \n",
       "43                    6.374680e+04                  78.463793  ...   \n",
       "564                   4.017346e+05                  69.620847  ...   \n",
       "7917                  1.033009e+06                  60.716923  ...   \n",
       "2263                  2.494586e+04                  82.547466  ...   \n",
       "8                     7.423691e+04                  75.940020  ...   \n",
       "\n",
       "      sfs_sc71_min_ll_sum  sfs_sc71_roa_mean  sfs_sc71_roa_std  \\\n",
       "gid                                                              \n",
       "43                   3933         136.394391          0.938602   \n",
       "564              40076188         137.910516          2.093903   \n",
       "7917           7900571136         139.556597          2.014015   \n",
       "2263                 1331         136.077853          0.267941   \n",
       "8                    4809         136.681028          1.377590   \n",
       "\n",
       "      sfs_sc71_roa_sum  sfs_sc71_std_mean  sfs_sc71_std_std  sfs_sc71_std_sum  \\\n",
       "gid                                                                             \n",
       "43              466878          16.233955          3.648450      55568.828125   \n",
       "564            3245724          14.498129          5.118067     341213.468750   \n",
       "7917           9974110           9.856942          7.202832     704475.625000   \n",
       "2263            180031          10.558998          4.329045      13969.554688   \n",
       "8               542487          15.218429          4.465160      60401.945312   \n",
       "\n",
       "      sfs_sc71_w_mean_mean  sfs_sc71_w_mean_std  sfs_sc71_w_mean_sum  \n",
       "gid                                                                   \n",
       "43                1.228705             0.707158          4205.858398  \n",
       "564               2.838843             3.471181         66812.164062  \n",
       "7917              3.388618             5.864246        242184.515625  \n",
       "2263              0.514668             0.239074           680.906372  \n",
       "8                 1.180995             0.868924          4687.369141  \n",
       "\n",
       "[5 rows x 426 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "spfeas.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Convert the GN_Code column to an integer index "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load the Global Urban Foot Print Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "guf = pd.read_csv(\"guf.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "guf['gid'] = guf['gid'].astype(int)\n",
    "guf = guf.set_index('gid')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>code</th>\n",
       "      <th>GN_area</th>\n",
       "      <th>PCNT_built</th>\n",
       "      <th>stats_sum</th>\n",
       "      <th>stats_coun</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8317</th>\n",
       "      <td>Amuhenkanda</td>\n",
       "      <td>9103141</td>\n",
       "      <td>2827990.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8343</th>\n",
       "      <td>Pathberiya</td>\n",
       "      <td>9103143</td>\n",
       "      <td>7990630.0</td>\n",
       "      <td>0.003116</td>\n",
       "      <td>63240.0</td>\n",
       "      <td>248.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8034</th>\n",
       "      <td>Karandana South</td>\n",
       "      <td>9109051</td>\n",
       "      <td>6962440.0</td>\n",
       "      <td>0.009336</td>\n",
       "      <td>165750.0</td>\n",
       "      <td>650.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2530</th>\n",
       "      <td>Ninthavur 21</td>\n",
       "      <td>5230105</td>\n",
       "      <td>136328.0</td>\n",
       "      <td>0.950648</td>\n",
       "      <td>327675.0</td>\n",
       "      <td>1285.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11485</th>\n",
       "      <td>Hambegamuwa</td>\n",
       "      <td>8230020</td>\n",
       "      <td>169392000.0</td>\n",
       "      <td>0.000407</td>\n",
       "      <td>176205.0</td>\n",
       "      <td>691.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  name     code      GN_area  PCNT_built  stats_sum  \\\n",
       "gid                                                                   \n",
       "8317       Amuhenkanda  9103141    2827990.0    0.000000        NaN   \n",
       "8343        Pathberiya  9103143    7990630.0    0.003116    63240.0   \n",
       "8034   Karandana South  9109051    6962440.0    0.009336   165750.0   \n",
       "2530      Ninthavur 21  5230105     136328.0    0.950648   327675.0   \n",
       "11485      Hambegamuwa  8230020  169392000.0    0.000407   176205.0   \n",
       "\n",
       "       stats_coun  \n",
       "gid                \n",
       "8317          0.0  \n",
       "8343        248.0  \n",
       "8034        650.0  \n",
       "2530       1285.0  \n",
       "11485       691.0  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "guf.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load World Pop Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "world_pop = pd.read_csv(\"LKA_ppp_v2b_2015_UNadj.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "world_pop['gid'] = world_pop['gid'].astype(int)\n",
    "world_pop = world_pop.set_index('gid')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gnd_n</th>\n",
       "      <th>gnd_c</th>\n",
       "      <th>prov_c</th>\n",
       "      <th>dis_c</th>\n",
       "      <th>dsd_c</th>\n",
       "      <th>_count</th>\n",
       "      <th>_sum</th>\n",
       "      <th>_mean</th>\n",
       "      <th>_sum_1</th>\n",
       "      <th>_mean_1</th>\n",
       "      <th>_stdev</th>\n",
       "      <th>stats_sum</th>\n",
       "      <th>stats_mean</th>\n",
       "      <th>stats_stde</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Karagaskada South</td>\n",
       "      <td>2148065</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>2148</td>\n",
       "      <td>3424.0</td>\n",
       "      <td>2.375725e+05</td>\n",
       "      <td>69.384478</td>\n",
       "      <td>2.375725e+05</td>\n",
       "      <td>69.384478</td>\n",
       "      <td>3.204200</td>\n",
       "      <td>1449.809568</td>\n",
       "      <td>38.152883</td>\n",
       "      <td>9.217206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>564</th>\n",
       "      <td>Panvila</td>\n",
       "      <td>2115070</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>2115</td>\n",
       "      <td>23528.0</td>\n",
       "      <td>1.399786e+06</td>\n",
       "      <td>59.494454</td>\n",
       "      <td>1.399786e+06</td>\n",
       "      <td>59.494454</td>\n",
       "      <td>7.828986</td>\n",
       "      <td>2535.205052</td>\n",
       "      <td>9.320607</td>\n",
       "      <td>6.254149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7917</th>\n",
       "      <td>Ganepalla</td>\n",
       "      <td>9227135</td>\n",
       "      <td>9</td>\n",
       "      <td>92</td>\n",
       "      <td>9227</td>\n",
       "      <td>71471.0</td>\n",
       "      <td>3.624548e+06</td>\n",
       "      <td>50.713548</td>\n",
       "      <td>3.624548e+06</td>\n",
       "      <td>50.713548</td>\n",
       "      <td>5.693804</td>\n",
       "      <td>2159.080772</td>\n",
       "      <td>2.588826</td>\n",
       "      <td>1.048305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2263</th>\n",
       "      <td>Akkaraipattu 11</td>\n",
       "      <td>5236065</td>\n",
       "      <td>5</td>\n",
       "      <td>52</td>\n",
       "      <td>5236</td>\n",
       "      <td>1324.0</td>\n",
       "      <td>9.756966e+04</td>\n",
       "      <td>73.693096</td>\n",
       "      <td>9.756966e+04</td>\n",
       "      <td>73.693096</td>\n",
       "      <td>1.740957</td>\n",
       "      <td>1347.887115</td>\n",
       "      <td>112.323926</td>\n",
       "      <td>19.274974</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Delgasthenna</td>\n",
       "      <td>2109125</td>\n",
       "      <td>2</td>\n",
       "      <td>21</td>\n",
       "      <td>2109</td>\n",
       "      <td>3962.0</td>\n",
       "      <td>2.652974e+05</td>\n",
       "      <td>66.960471</td>\n",
       "      <td>2.652974e+05</td>\n",
       "      <td>66.960471</td>\n",
       "      <td>2.741948</td>\n",
       "      <td>1918.727637</td>\n",
       "      <td>43.607446</td>\n",
       "      <td>17.221524</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  gnd_n    gnd_c  prov_c  dis_c  dsd_c   _count          _sum  \\\n",
       "gid                                                                             \n",
       "43    Karagaskada South  2148065       2     21   2148   3424.0  2.375725e+05   \n",
       "564             Panvila  2115070       2     21   2115  23528.0  1.399786e+06   \n",
       "7917          Ganepalla  9227135       9     92   9227  71471.0  3.624548e+06   \n",
       "2263    Akkaraipattu 11  5236065       5     52   5236   1324.0  9.756966e+04   \n",
       "8          Delgasthenna  2109125       2     21   2109   3962.0  2.652974e+05   \n",
       "\n",
       "          _mean        _sum_1    _mean_1    _stdev    stats_sum  stats_mean  \\\n",
       "gid                                                                           \n",
       "43    69.384478  2.375725e+05  69.384478  3.204200  1449.809568   38.152883   \n",
       "564   59.494454  1.399786e+06  59.494454  7.828986  2535.205052    9.320607   \n",
       "7917  50.713548  3.624548e+06  50.713548  5.693804  2159.080772    2.588826   \n",
       "2263  73.693096  9.756966e+04  73.693096  1.740957  1347.887115  112.323926   \n",
       "8     66.960471  2.652974e+05  66.960471  2.741948  1918.727637   43.607446   \n",
       "\n",
       "      stats_stde  \n",
       "gid               \n",
       "43      9.217206  \n",
       "564     6.254149  \n",
       "7917    1.048305  \n",
       "2263   19.274974  \n",
       "8      17.221524  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "world_pop.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Total Population size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "21572637.865962513"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sum(world_pop['stats_sum'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Merge population data with urbanfootprint and featuures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "guf_spfeas_merged = spfeas.merge(guf, left_on='gnd_c', right_on='code', how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "guf_spfeas_world_pop_merged = guf_spfeas_merged.merge(world_pop, left_on='code', right_on='gnd_c', how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fid</th>\n",
       "      <th>gnd_n_x</th>\n",
       "      <th>gnd_c_x</th>\n",
       "      <th>fourier_v2_sc31_mean_mean</th>\n",
       "      <th>fourier_v2_sc31_mean_std</th>\n",
       "      <th>fourier_v2_sc31_mean_sum</th>\n",
       "      <th>fourier_v2_sc31_variance_mean</th>\n",
       "      <th>fourier_v2_sc31_variance_std</th>\n",
       "      <th>fourier_v2_sc31_variance_sum</th>\n",
       "      <th>fourier_v2_sc51_mean_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>dsd_c</th>\n",
       "      <th>_count</th>\n",
       "      <th>_sum</th>\n",
       "      <th>_mean</th>\n",
       "      <th>_sum_1</th>\n",
       "      <th>_mean_1</th>\n",
       "      <th>_stdev</th>\n",
       "      <th>stats_sum_y</th>\n",
       "      <th>stats_mean</th>\n",
       "      <th>stats_stde</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>Karagaskada South</td>\n",
       "      <td>2148065.0</td>\n",
       "      <td>69.388822</td>\n",
       "      <td>3.203212</td>\n",
       "      <td>2.375179e+05</td>\n",
       "      <td>18.623078</td>\n",
       "      <td>0.985125</td>\n",
       "      <td>6.374680e+04</td>\n",
       "      <td>78.463793</td>\n",
       "      <td>...</td>\n",
       "      <td>2148.0</td>\n",
       "      <td>3424.0</td>\n",
       "      <td>2.375725e+05</td>\n",
       "      <td>69.384478</td>\n",
       "      <td>2.375725e+05</td>\n",
       "      <td>69.384478</td>\n",
       "      <td>3.204200</td>\n",
       "      <td>1449.809568</td>\n",
       "      <td>38.152883</td>\n",
       "      <td>9.217206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>Panvila</td>\n",
       "      <td>2115070.0</td>\n",
       "      <td>59.471181</td>\n",
       "      <td>7.831063</td>\n",
       "      <td>1.399654e+06</td>\n",
       "      <td>17.069666</td>\n",
       "      <td>2.198242</td>\n",
       "      <td>4.017346e+05</td>\n",
       "      <td>69.620847</td>\n",
       "      <td>...</td>\n",
       "      <td>2115.0</td>\n",
       "      <td>23528.0</td>\n",
       "      <td>1.399786e+06</td>\n",
       "      <td>59.494454</td>\n",
       "      <td>1.399786e+06</td>\n",
       "      <td>59.494454</td>\n",
       "      <td>7.828986</td>\n",
       "      <td>2535.205052</td>\n",
       "      <td>9.320607</td>\n",
       "      <td>6.254149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.0</td>\n",
       "      <td>Ganepalla</td>\n",
       "      <td>9227135.0</td>\n",
       "      <td>50.736799</td>\n",
       "      <td>5.697583</td>\n",
       "      <td>3.626159e+06</td>\n",
       "      <td>14.453749</td>\n",
       "      <td>2.114334</td>\n",
       "      <td>1.033009e+06</td>\n",
       "      <td>60.716923</td>\n",
       "      <td>...</td>\n",
       "      <td>9227.0</td>\n",
       "      <td>71471.0</td>\n",
       "      <td>3.624548e+06</td>\n",
       "      <td>50.713548</td>\n",
       "      <td>3.624548e+06</td>\n",
       "      <td>50.713548</td>\n",
       "      <td>5.693804</td>\n",
       "      <td>2159.080772</td>\n",
       "      <td>2.588826</td>\n",
       "      <td>1.048305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.0</td>\n",
       "      <td>Akkaraipattu 11</td>\n",
       "      <td>5236065.0</td>\n",
       "      <td>73.662439</td>\n",
       "      <td>1.809957</td>\n",
       "      <td>9.745541e+04</td>\n",
       "      <td>18.855526</td>\n",
       "      <td>1.246785</td>\n",
       "      <td>2.494586e+04</td>\n",
       "      <td>82.547466</td>\n",
       "      <td>...</td>\n",
       "      <td>5236.0</td>\n",
       "      <td>1324.0</td>\n",
       "      <td>9.756966e+04</td>\n",
       "      <td>73.693096</td>\n",
       "      <td>9.756966e+04</td>\n",
       "      <td>73.693096</td>\n",
       "      <td>1.740957</td>\n",
       "      <td>1347.887115</td>\n",
       "      <td>112.323926</td>\n",
       "      <td>19.274974</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.0</td>\n",
       "      <td>Delgasthenna</td>\n",
       "      <td>2109125.0</td>\n",
       "      <td>66.871213</td>\n",
       "      <td>2.745255</td>\n",
       "      <td>2.654118e+05</td>\n",
       "      <td>18.704186</td>\n",
       "      <td>1.010429</td>\n",
       "      <td>7.423691e+04</td>\n",
       "      <td>75.940020</td>\n",
       "      <td>...</td>\n",
       "      <td>2109.0</td>\n",
       "      <td>3962.0</td>\n",
       "      <td>2.652974e+05</td>\n",
       "      <td>66.960471</td>\n",
       "      <td>2.652974e+05</td>\n",
       "      <td>66.960471</td>\n",
       "      <td>2.741948</td>\n",
       "      <td>1918.727637</td>\n",
       "      <td>43.607446</td>\n",
       "      <td>17.221524</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 446 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   fid            gnd_n_x    gnd_c_x  fourier_v2_sc31_mean_mean  \\\n",
       "0  0.0  Karagaskada South  2148065.0                  69.388822   \n",
       "1  1.0            Panvila  2115070.0                  59.471181   \n",
       "2  2.0          Ganepalla  9227135.0                  50.736799   \n",
       "3  3.0    Akkaraipattu 11  5236065.0                  73.662439   \n",
       "4  4.0       Delgasthenna  2109125.0                  66.871213   \n",
       "\n",
       "   fourier_v2_sc31_mean_std  fourier_v2_sc31_mean_sum  \\\n",
       "0                  3.203212              2.375179e+05   \n",
       "1                  7.831063              1.399654e+06   \n",
       "2                  5.697583              3.626159e+06   \n",
       "3                  1.809957              9.745541e+04   \n",
       "4                  2.745255              2.654118e+05   \n",
       "\n",
       "   fourier_v2_sc31_variance_mean  fourier_v2_sc31_variance_std  \\\n",
       "0                      18.623078                      0.985125   \n",
       "1                      17.069666                      2.198242   \n",
       "2                      14.453749                      2.114334   \n",
       "3                      18.855526                      1.246785   \n",
       "4                      18.704186                      1.010429   \n",
       "\n",
       "   fourier_v2_sc31_variance_sum  fourier_v2_sc51_mean_mean  ...   dsd_c  \\\n",
       "0                  6.374680e+04                  78.463793  ...  2148.0   \n",
       "1                  4.017346e+05                  69.620847  ...  2115.0   \n",
       "2                  1.033009e+06                  60.716923  ...  9227.0   \n",
       "3                  2.494586e+04                  82.547466  ...  5236.0   \n",
       "4                  7.423691e+04                  75.940020  ...  2109.0   \n",
       "\n",
       "    _count          _sum      _mean        _sum_1    _mean_1    _stdev  \\\n",
       "0   3424.0  2.375725e+05  69.384478  2.375725e+05  69.384478  3.204200   \n",
       "1  23528.0  1.399786e+06  59.494454  1.399786e+06  59.494454  7.828986   \n",
       "2  71471.0  3.624548e+06  50.713548  3.624548e+06  50.713548  5.693804   \n",
       "3   1324.0  9.756966e+04  73.693096  9.756966e+04  73.693096  1.740957   \n",
       "4   3962.0  2.652974e+05  66.960471  2.652974e+05  66.960471  2.741948   \n",
       "\n",
       "   stats_sum_y  stats_mean  stats_stde  \n",
       "0  1449.809568   38.152883    9.217206  \n",
       "1  2535.205052    9.320607    6.254149  \n",
       "2  2159.080772    2.588826    1.048305  \n",
       "3  1347.887115  112.323926   19.274974  \n",
       "4  1918.727637   43.607446   17.221524  \n",
       "\n",
       "[5 rows x 446 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "guf_spfeas_world_pop_merged.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Filter Dataset by Builtup Surface. \n",
    "\n",
    "Select Rows where  builtup is greater than or equal to 10 percent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "filter_by_builtup = guf_spfeas_world_pop_merged[guf_spfeas_world_pop_merged['PCNT_built']>=0.1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fid</th>\n",
       "      <th>gnd_n_x</th>\n",
       "      <th>gnd_c_x</th>\n",
       "      <th>fourier_v2_sc31_mean_mean</th>\n",
       "      <th>fourier_v2_sc31_mean_std</th>\n",
       "      <th>fourier_v2_sc31_mean_sum</th>\n",
       "      <th>fourier_v2_sc31_variance_mean</th>\n",
       "      <th>fourier_v2_sc31_variance_std</th>\n",
       "      <th>fourier_v2_sc31_variance_sum</th>\n",
       "      <th>fourier_v2_sc51_mean_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>dsd_c</th>\n",
       "      <th>_count</th>\n",
       "      <th>_sum</th>\n",
       "      <th>_mean</th>\n",
       "      <th>_sum_1</th>\n",
       "      <th>_mean_1</th>\n",
       "      <th>_stdev</th>\n",
       "      <th>stats_sum_y</th>\n",
       "      <th>stats_mean</th>\n",
       "      <th>stats_stde</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>Karagaskada South</td>\n",
       "      <td>2148065.0</td>\n",
       "      <td>69.388822</td>\n",
       "      <td>3.203212</td>\n",
       "      <td>2.375179e+05</td>\n",
       "      <td>18.623078</td>\n",
       "      <td>0.985125</td>\n",
       "      <td>63746.79688</td>\n",
       "      <td>78.463793</td>\n",
       "      <td>...</td>\n",
       "      <td>2148.0</td>\n",
       "      <td>3424.0</td>\n",
       "      <td>2.375725e+05</td>\n",
       "      <td>69.384478</td>\n",
       "      <td>2.375725e+05</td>\n",
       "      <td>69.384478</td>\n",
       "      <td>3.204200</td>\n",
       "      <td>1449.809568</td>\n",
       "      <td>38.152883</td>\n",
       "      <td>9.217206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.0</td>\n",
       "      <td>Akkaraipattu 11</td>\n",
       "      <td>5236065.0</td>\n",
       "      <td>73.662439</td>\n",
       "      <td>1.809957</td>\n",
       "      <td>9.745541e+04</td>\n",
       "      <td>18.855526</td>\n",
       "      <td>1.246785</td>\n",
       "      <td>24945.86133</td>\n",
       "      <td>82.547466</td>\n",
       "      <td>...</td>\n",
       "      <td>5236.0</td>\n",
       "      <td>1324.0</td>\n",
       "      <td>9.756966e+04</td>\n",
       "      <td>73.693096</td>\n",
       "      <td>9.756966e+04</td>\n",
       "      <td>73.693096</td>\n",
       "      <td>1.740957</td>\n",
       "      <td>1347.887115</td>\n",
       "      <td>112.323926</td>\n",
       "      <td>19.274974</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.0</td>\n",
       "      <td>Delgasthenna</td>\n",
       "      <td>2109125.0</td>\n",
       "      <td>66.871213</td>\n",
       "      <td>2.745255</td>\n",
       "      <td>2.654118e+05</td>\n",
       "      <td>18.704186</td>\n",
       "      <td>1.010429</td>\n",
       "      <td>74236.91406</td>\n",
       "      <td>75.940020</td>\n",
       "      <td>...</td>\n",
       "      <td>2109.0</td>\n",
       "      <td>3962.0</td>\n",
       "      <td>2.652974e+05</td>\n",
       "      <td>66.960471</td>\n",
       "      <td>2.652974e+05</td>\n",
       "      <td>66.960471</td>\n",
       "      <td>2.741948</td>\n",
       "      <td>1918.727637</td>\n",
       "      <td>43.607446</td>\n",
       "      <td>17.221524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6.0</td>\n",
       "      <td>Santhiveli</td>\n",
       "      <td>5110065.0</td>\n",
       "      <td>67.161003</td>\n",
       "      <td>9.787730</td>\n",
       "      <td>1.302319e+06</td>\n",
       "      <td>19.317812</td>\n",
       "      <td>2.685797</td>\n",
       "      <td>374591.68750</td>\n",
       "      <td>77.032960</td>\n",
       "      <td>...</td>\n",
       "      <td>5110.0</td>\n",
       "      <td>19388.0</td>\n",
       "      <td>1.300859e+06</td>\n",
       "      <td>67.096112</td>\n",
       "      <td>1.300859e+06</td>\n",
       "      <td>67.096112</td>\n",
       "      <td>9.778634</td>\n",
       "      <td>3450.710668</td>\n",
       "      <td>19.277713</td>\n",
       "      <td>11.370510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7.0</td>\n",
       "      <td>Nawayalathenna</td>\n",
       "      <td>2112235.0</td>\n",
       "      <td>66.706500</td>\n",
       "      <td>3.342452</td>\n",
       "      <td>4.339258e+05</td>\n",
       "      <td>19.106087</td>\n",
       "      <td>1.265223</td>\n",
       "      <td>124285.09380</td>\n",
       "      <td>75.738004</td>\n",
       "      <td>...</td>\n",
       "      <td>2112.0</td>\n",
       "      <td>6506.0</td>\n",
       "      <td>4.340206e+05</td>\n",
       "      <td>66.710824</td>\n",
       "      <td>4.340206e+05</td>\n",
       "      <td>66.710824</td>\n",
       "      <td>3.344685</td>\n",
       "      <td>2492.615091</td>\n",
       "      <td>32.797567</td>\n",
       "      <td>6.309197</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 446 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   fid            gnd_n_x    gnd_c_x  fourier_v2_sc31_mean_mean  \\\n",
       "0  0.0  Karagaskada South  2148065.0                  69.388822   \n",
       "3  3.0    Akkaraipattu 11  5236065.0                  73.662439   \n",
       "4  4.0       Delgasthenna  2109125.0                  66.871213   \n",
       "6  6.0         Santhiveli  5110065.0                  67.161003   \n",
       "7  7.0     Nawayalathenna  2112235.0                  66.706500   \n",
       "\n",
       "   fourier_v2_sc31_mean_std  fourier_v2_sc31_mean_sum  \\\n",
       "0                  3.203212              2.375179e+05   \n",
       "3                  1.809957              9.745541e+04   \n",
       "4                  2.745255              2.654118e+05   \n",
       "6                  9.787730              1.302319e+06   \n",
       "7                  3.342452              4.339258e+05   \n",
       "\n",
       "   fourier_v2_sc31_variance_mean  fourier_v2_sc31_variance_std  \\\n",
       "0                      18.623078                      0.985125   \n",
       "3                      18.855526                      1.246785   \n",
       "4                      18.704186                      1.010429   \n",
       "6                      19.317812                      2.685797   \n",
       "7                      19.106087                      1.265223   \n",
       "\n",
       "   fourier_v2_sc31_variance_sum  fourier_v2_sc51_mean_mean  ...   dsd_c  \\\n",
       "0                   63746.79688                  78.463793  ...  2148.0   \n",
       "3                   24945.86133                  82.547466  ...  5236.0   \n",
       "4                   74236.91406                  75.940020  ...  2109.0   \n",
       "6                  374591.68750                  77.032960  ...  5110.0   \n",
       "7                  124285.09380                  75.738004  ...  2112.0   \n",
       "\n",
       "    _count          _sum      _mean        _sum_1    _mean_1    _stdev  \\\n",
       "0   3424.0  2.375725e+05  69.384478  2.375725e+05  69.384478  3.204200   \n",
       "3   1324.0  9.756966e+04  73.693096  9.756966e+04  73.693096  1.740957   \n",
       "4   3962.0  2.652974e+05  66.960471  2.652974e+05  66.960471  2.741948   \n",
       "6  19388.0  1.300859e+06  67.096112  1.300859e+06  67.096112  9.778634   \n",
       "7   6506.0  4.340206e+05  66.710824  4.340206e+05  66.710824  3.344685   \n",
       "\n",
       "   stats_sum_y  stats_mean  stats_stde  \n",
       "0  1449.809568   38.152883    9.217206  \n",
       "3  1347.887115  112.323926   19.274974  \n",
       "4  1918.727637   43.607446   17.221524  \n",
       "6  3450.710668   19.277713   11.370510  \n",
       "7  2492.615091   32.797567    6.309197  \n",
       "\n",
       "[5 rows x 446 columns]"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filter_by_builtup.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9056169.2768954374"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sum(filter_by_builtup['stats_sum_y'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "pop_density = filter_by_builtup['stats_sum_y']/filter_by_builtup['GN_area']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "pop_count = filter_by_builtup['stats_sum_y']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((3747, 446), (3747,))"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filter_by_builtup.shape, pop_count.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.subplots(figsize=(8,8))\n",
    "y = pop_count\n",
    "x = filter_by_builtup['PCNT_built']\n",
    "plt.scatter(x, y)\n",
    "\n",
    "z = np.polyfit(x, y, 1)\n",
    "p = np.poly1d(z)\n",
    "plt.plot(x,p(x),\"r--\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Get the list of dependent variables from the DataFrame to store in list y_vars"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'PCNT_built'"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "y_var = list(filter_by_builtup.axes[1])[429]\n",
    "y_var"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Get a list of all independent variables from the DataFrame in list all_x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['fourier_v2_sc31_mean_mean',\n",
       " 'fourier_v2_sc31_mean_std',\n",
       " 'fourier_v2_sc31_mean_sum',\n",
       " 'fourier_v2_sc31_variance_mean',\n",
       " 'fourier_v2_sc31_variance_std',\n",
       " 'fourier_v2_sc31_variance_sum',\n",
       " 'fourier_v2_sc51_mean_mean',\n",
       " 'fourier_v2_sc51_mean_std',\n",
       " 'fourier_v2_sc51_mean_sum',\n",
       " 'fourier_v2_sc51_variance_mean',\n",
       " 'fourier_v2_sc51_variance_std',\n",
       " 'fourier_v2_sc51_variance_sum',\n",
       " 'fourier_v2_sc71_mean_mean',\n",
       " 'fourier_v2_sc71_mean_std',\n",
       " 'fourier_v2_sc71_mean_sum',\n",
       " 'fourier_v2_sc71_variance_mean',\n",
       " 'fourier_v2_sc71_variance_std',\n",
       " 'fourier_v2_sc71_variance_sum',\n",
       " 'gabor_sc3_filter_1_mean',\n",
       " 'gabor_sc3_filter_1_std',\n",
       " 'gabor_sc3_filter_1_sum',\n",
       " 'gabor_sc3_filter_10_mean',\n",
       " 'gabor_sc3_filter_10_std',\n",
       " 'gabor_sc3_filter_10_sum',\n",
       " 'gabor_sc3_filter_11_mean',\n",
       " 'gabor_sc3_filter_11_std',\n",
       " 'gabor_sc3_filter_11_sum',\n",
       " 'gabor_sc3_filter_12_mean',\n",
       " 'gabor_sc3_filter_12_std',\n",
       " 'gabor_sc3_filter_12_sum',\n",
       " 'gabor_sc3_filter_13_mean',\n",
       " 'gabor_sc3_filter_13_std',\n",
       " 'gabor_sc3_filter_13_sum',\n",
       " 'gabor_sc3_filter_14_mean',\n",
       " 'gabor_sc3_filter_14_std',\n",
       " 'gabor_sc3_filter_14_sum',\n",
       " 'gabor_sc3_filter_2_mean',\n",
       " 'gabor_sc3_filter_2_std',\n",
       " 'gabor_sc3_filter_2_sum',\n",
       " 'gabor_sc3_filter_3_mean',\n",
       " 'gabor_sc3_filter_3_std',\n",
       " 'gabor_sc3_filter_3_sum',\n",
       " 'gabor_sc3_filter_4_mean',\n",
       " 'gabor_sc3_filter_4_std',\n",
       " 'gabor_sc3_filter_4_sum',\n",
       " 'gabor_sc3_filter_5_mean',\n",
       " 'gabor_sc3_filter_5_std',\n",
       " 'gabor_sc3_filter_5_sum',\n",
       " 'gabor_sc3_filter_6_mean',\n",
       " 'gabor_sc3_filter_6_std',\n",
       " 'gabor_sc3_filter_6_sum',\n",
       " 'gabor_sc3_filter_7_mean',\n",
       " 'gabor_sc3_filter_7_std',\n",
       " 'gabor_sc3_filter_7_sum',\n",
       " 'gabor_sc3_filter_8_mean',\n",
       " 'gabor_sc3_filter_8_std',\n",
       " 'gabor_sc3_filter_8_sum',\n",
       " 'gabor_sc3_filter_9_mean',\n",
       " 'gabor_sc3_filter_9_std',\n",
       " 'gabor_sc3_filter_9_sum',\n",
       " 'gabor_sc3_mean_mean',\n",
       " 'gabor_sc3_mean_std',\n",
       " 'gabor_sc3_mean_sum',\n",
       " 'gabor_sc3_variance_mean',\n",
       " 'gabor_sc3_variance_std',\n",
       " 'gabor_sc3_variance_sum',\n",
       " 'gabor_sc5_filter_1_mean',\n",
       " 'gabor_sc5_filter_1_std',\n",
       " 'gabor_sc5_filter_1_sum',\n",
       " 'gabor_sc5_filter_10_mean',\n",
       " 'gabor_sc5_filter_10_std',\n",
       " 'gabor_sc5_filter_10_sum',\n",
       " 'gabor_sc5_filter_11_mean',\n",
       " 'gabor_sc5_filter_11_std',\n",
       " 'gabor_sc5_filter_11_sum',\n",
       " 'gabor_sc5_filter_12_mean',\n",
       " 'gabor_sc5_filter_12_std',\n",
       " 'gabor_sc5_filter_12_sum',\n",
       " 'gabor_sc5_filter_13_mean',\n",
       " 'gabor_sc5_filter_13_std',\n",
       " 'gabor_sc5_filter_13_sum',\n",
       " 'gabor_sc5_filter_14_mean',\n",
       " 'gabor_sc5_filter_14_std',\n",
       " 'gabor_sc5_filter_14_sum',\n",
       " 'gabor_sc5_filter_2_mean',\n",
       " 'gabor_sc5_filter_2_std',\n",
       " 'gabor_sc5_filter_2_sum',\n",
       " 'gabor_sc5_filter_3_mean',\n",
       " 'gabor_sc5_filter_3_std',\n",
       " 'gabor_sc5_filter_3_sum',\n",
       " 'gabor_sc5_filter_4_mean',\n",
       " 'gabor_sc5_filter_4_std',\n",
       " 'gabor_sc5_filter_4_sum',\n",
       " 'gabor_sc5_filter_5_mean',\n",
       " 'gabor_sc5_filter_5_std',\n",
       " 'gabor_sc5_filter_5_sum',\n",
       " 'gabor_sc5_filter_6_mean',\n",
       " 'gabor_sc5_filter_6_std',\n",
       " 'gabor_sc5_filter_6_sum',\n",
       " 'gabor_sc5_filter_7_mean',\n",
       " 'gabor_sc5_filter_7_std',\n",
       " 'gabor_sc5_filter_7_sum',\n",
       " 'gabor_sc5_filter_8_mean',\n",
       " 'gabor_sc5_filter_8_std',\n",
       " 'gabor_sc5_filter_8_sum',\n",
       " 'gabor_sc5_filter_9_mean',\n",
       " 'gabor_sc5_filter_9_std',\n",
       " 'gabor_sc5_filter_9_sum',\n",
       " 'gabor_sc5_mean_mean',\n",
       " 'gabor_sc5_mean_std',\n",
       " 'gabor_sc5_mean_sum',\n",
       " 'gabor_sc5_variance_mean',\n",
       " 'gabor_sc5_variance_std',\n",
       " 'gabor_sc5_variance_sum',\n",
       " 'gabor_sc7_filter_1_mean',\n",
       " 'gabor_sc7_filter_1_std',\n",
       " 'gabor_sc7_filter_1_sum',\n",
       " 'gabor_sc7_filter_10_mean',\n",
       " 'gabor_sc7_filter_10_std',\n",
       " 'gabor_sc7_filter_10_sum',\n",
       " 'gabor_sc7_filter_11_mean',\n",
       " 'gabor_sc7_filter_11_std',\n",
       " 'gabor_sc7_filter_11_sum',\n",
       " 'gabor_sc7_filter_12_mean',\n",
       " 'gabor_sc7_filter_12_std',\n",
       " 'gabor_sc7_filter_12_sum',\n",
       " 'gabor_sc7_filter_13_mean',\n",
       " 'gabor_sc7_filter_13_std',\n",
       " 'gabor_sc7_filter_13_sum',\n",
       " 'gabor_sc7_filter_14_mean',\n",
       " 'gabor_sc7_filter_14_std',\n",
       " 'gabor_sc7_filter_14_sum',\n",
       " 'gabor_sc7_filter_2_mean',\n",
       " 'gabor_sc7_filter_2_std',\n",
       " 'gabor_sc7_filter_2_sum',\n",
       " 'gabor_sc7_filter_3_mean',\n",
       " 'gabor_sc7_filter_3_std',\n",
       " 'gabor_sc7_filter_3_sum',\n",
       " 'gabor_sc7_filter_4_mean',\n",
       " 'gabor_sc7_filter_4_std',\n",
       " 'gabor_sc7_filter_4_sum',\n",
       " 'gabor_sc7_filter_5_mean',\n",
       " 'gabor_sc7_filter_5_std',\n",
       " 'gabor_sc7_filter_5_sum',\n",
       " 'gabor_sc7_filter_6_mean',\n",
       " 'gabor_sc7_filter_6_std',\n",
       " 'gabor_sc7_filter_6_sum',\n",
       " 'gabor_sc7_filter_7_mean',\n",
       " 'gabor_sc7_filter_7_std',\n",
       " 'gabor_sc7_filter_7_sum',\n",
       " 'gabor_sc7_filter_8_mean',\n",
       " 'gabor_sc7_filter_8_std',\n",
       " 'gabor_sc7_filter_8_sum',\n",
       " 'gabor_sc7_filter_9_mean',\n",
       " 'gabor_sc7_filter_9_std',\n",
       " 'gabor_sc7_filter_9_sum',\n",
       " 'gabor_sc7_mean_mean',\n",
       " 'gabor_sc7_mean_std',\n",
       " 'gabor_sc7_mean_sum',\n",
       " 'gabor_sc7_variance_mean',\n",
       " 'gabor_sc7_variance_std',\n",
       " 'gabor_sc7_variance_sum',\n",
       " 'hog_sc3_kurtosis_mean',\n",
       " 'hog_sc3_kurtosis_std',\n",
       " 'hog_sc3_kurtosis_sum',\n",
       " 'hog_sc3_mean_mean',\n",
       " 'hog_sc3_mean_std',\n",
       " 'hog_sc3_mean_sum',\n",
       " 'hog_sc3_skew_mean',\n",
       " 'hog_sc3_skew_std',\n",
       " 'hog_sc3_skew_sum',\n",
       " 'hog_sc3_variance_mean',\n",
       " 'hog_sc3_variance_std',\n",
       " 'hog_sc3_variance_sum',\n",
       " 'hog_sc5_kurtosis_mean',\n",
       " 'hog_sc5_kurtosis_std',\n",
       " 'hog_sc5_kurtosis_sum',\n",
       " 'hog_sc5_mean_mean',\n",
       " 'hog_sc5_mean_std',\n",
       " 'hog_sc5_mean_sum',\n",
       " 'hog_sc5_skew_mean',\n",
       " 'hog_sc5_skew_std',\n",
       " 'hog_sc5_skew_sum',\n",
       " 'hog_sc5_variance_mean',\n",
       " 'hog_sc5_variance_std',\n",
       " 'hog_sc5_variance_sum',\n",
       " 'hog_sc7_kurtosis_mean',\n",
       " 'hog_sc7_kurtosis_std',\n",
       " 'hog_sc7_kurtosis_sum',\n",
       " 'hog_sc7_mean_mean',\n",
       " 'hog_sc7_mean_std',\n",
       " 'hog_sc7_mean_sum',\n",
       " 'hog_sc7_skew_mean',\n",
       " 'hog_sc7_skew_std',\n",
       " 'hog_sc7_skew_sum',\n",
       " 'hog_sc7_variance_mean',\n",
       " 'hog_sc7_variance_std',\n",
       " 'hog_sc7_variance_sum',\n",
       " 'lac_sc3_lac_mean',\n",
       " 'lac_sc3_lac_std',\n",
       " 'lac_sc3_lac_sum',\n",
       " 'lac_sc5_lac_mean',\n",
       " 'lac_sc5_lac_std',\n",
       " 'lac_sc5_lac_sum',\n",
       " 'lac_sc7_lac_mean',\n",
       " 'lac_sc7_lac_std',\n",
       " 'lac_sc7_lac_sum',\n",
       " 'lbpm_sc3_kurtosis_mean',\n",
       " 'lbpm_sc3_kurtosis_std',\n",
       " 'lbpm_sc3_kurtosis_sum',\n",
       " 'lbpm_sc3_max_mean',\n",
       " 'lbpm_sc3_max_std',\n",
       " 'lbpm_sc3_max_sum',\n",
       " 'lbpm_sc3_mean_mean',\n",
       " 'lbpm_sc3_mean_std',\n",
       " 'lbpm_sc3_mean_sum',\n",
       " 'lbpm_sc3_skew_mean',\n",
       " 'lbpm_sc3_skew_std',\n",
       " 'lbpm_sc3_skew_sum',\n",
       " 'lbpm_sc3_variance_mean',\n",
       " 'lbpm_sc3_variance_std',\n",
       " 'lbpm_sc3_variance_sum',\n",
       " 'lbpm_sc5_kurtosis_mean',\n",
       " 'lbpm_sc5_kurtosis_std',\n",
       " 'lbpm_sc5_kurtosis_sum',\n",
       " 'lbpm_sc5_max_mean',\n",
       " 'lbpm_sc5_max_std',\n",
       " 'lbpm_sc5_max_sum',\n",
       " 'lbpm_sc5_mean_mean',\n",
       " 'lbpm_sc5_mean_std',\n",
       " 'lbpm_sc5_mean_sum',\n",
       " 'lbpm_sc5_skew_mean',\n",
       " 'lbpm_sc5_skew_std',\n",
       " 'lbpm_sc5_skew_sum',\n",
       " 'lbpm_sc5_variance_mean',\n",
       " 'lbpm_sc5_variance_std',\n",
       " 'lbpm_sc5_variance_sum',\n",
       " 'lbpm_sc7_kurtosis_mean',\n",
       " 'lbpm_sc7_kurtosis_std',\n",
       " 'lbpm_sc7_kurtosis_sum',\n",
       " 'lbpm_sc7_max_mean',\n",
       " 'lbpm_sc7_max_std',\n",
       " 'lbpm_sc7_max_sum',\n",
       " 'lbpm_sc7_mean_mean',\n",
       " 'lbpm_sc7_mean_std',\n",
       " 'lbpm_sc7_mean_sum',\n",
       " 'lbpm_sc7_skew_mean',\n",
       " 'lbpm_sc7_skew_std',\n",
       " 'lbpm_sc7_skew_sum',\n",
       " 'lbpm_sc7_variance_mean',\n",
       " 'lbpm_sc7_variance_std',\n",
       " 'lbpm_sc7_variance_sum',\n",
       " 'lsr_sc3_line_contrast_mean',\n",
       " 'lsr_sc3_line_contrast_std',\n",
       " 'lsr_sc3_line_contrast_sum',\n",
       " 'lsr_sc3_line_length_mean',\n",
       " 'lsr_sc3_line_length_std',\n",
       " 'lsr_sc3_line_length_sum',\n",
       " 'lsr_sc3_line_mean_mean',\n",
       " 'lsr_sc3_line_mean_std',\n",
       " 'lsr_sc3_line_mean_sum',\n",
       " 'lsr_sc5_line_contrast_mean',\n",
       " 'lsr_sc5_line_contrast_std',\n",
       " 'lsr_sc5_line_contrast_sum',\n",
       " 'lsr_sc5_line_length_mean',\n",
       " 'lsr_sc5_line_length_std',\n",
       " 'lsr_sc5_line_length_sum',\n",
       " 'lsr_sc5_line_mean_mean',\n",
       " 'lsr_sc5_line_mean_std',\n",
       " 'lsr_sc5_line_mean_sum',\n",
       " 'lsr_sc7_line_contrast_mean',\n",
       " 'lsr_sc7_line_contrast_std',\n",
       " 'lsr_sc7_line_contrast_sum',\n",
       " 'lsr_sc7_line_length_mean',\n",
       " 'lsr_sc7_line_length_std',\n",
       " 'lsr_sc7_line_length_sum',\n",
       " 'lsr_sc7_line_mean_mean',\n",
       " 'lsr_sc7_line_mean_std',\n",
       " 'lsr_sc7_line_mean_sum',\n",
       " 'mean_sc3_mean_mean',\n",
       " 'mean_sc3_mean_std',\n",
       " 'mean_sc3_mean_sum',\n",
       " 'mean_sc3_variance_mean',\n",
       " 'mean_sc3_variance_std',\n",
       " 'mean_sc3_variance_sum',\n",
       " 'mean_sc5_mean_mean',\n",
       " 'mean_sc5_mean_std',\n",
       " 'mean_sc5_mean_sum',\n",
       " 'mean_sc5_variance_mean',\n",
       " 'mean_sc5_variance_std',\n",
       " 'mean_sc5_variance_sum',\n",
       " 'mean_sc7_mean_mean',\n",
       " 'mean_sc7_mean_std',\n",
       " 'mean_sc7_mean_sum',\n",
       " 'mean_sc7_variance_mean',\n",
       " 'mean_sc7_variance_std',\n",
       " 'mean_sc7_variance_sum',\n",
       " 'ndvi_sc3_mean_mean',\n",
       " 'ndvi_sc3_mean_std',\n",
       " 'ndvi_sc3_mean_sum',\n",
       " 'ndvi_sc3_variance_mean',\n",
       " 'ndvi_sc3_variance_std',\n",
       " 'ndvi_sc3_variance_sum',\n",
       " 'ndvi_sc5_mean_mean',\n",
       " 'ndvi_sc5_mean_std',\n",
       " 'ndvi_sc5_mean_sum',\n",
       " 'ndvi_sc5_variance_mean',\n",
       " 'ndvi_sc5_variance_std',\n",
       " 'ndvi_sc5_variance_sum',\n",
       " 'ndvi_sc7_mean_mean',\n",
       " 'ndvi_sc7_mean_std',\n",
       " 'ndvi_sc7_mean_sum',\n",
       " 'ndvi_sc7_variance_mean',\n",
       " 'ndvi_sc7_variance_std',\n",
       " 'ndvi_sc7_variance_sum',\n",
       " 'orb_sc31_kurtosis_mean',\n",
       " 'orb_sc31_kurtosis_std',\n",
       " 'orb_sc31_kurtosis_sum',\n",
       " 'orb_sc31_max_mean',\n",
       " 'orb_sc31_max_std',\n",
       " 'orb_sc31_max_sum',\n",
       " 'orb_sc31_mean_mean',\n",
       " 'orb_sc31_mean_std',\n",
       " 'orb_sc31_mean_sum',\n",
       " 'orb_sc31_skew_mean',\n",
       " 'orb_sc31_skew_std',\n",
       " 'orb_sc31_skew_sum',\n",
       " 'orb_sc31_variance_mean',\n",
       " 'orb_sc31_variance_std',\n",
       " 'orb_sc31_variance_sum',\n",
       " 'orb_sc51_kurtosis_mean',\n",
       " 'orb_sc51_kurtosis_std',\n",
       " 'orb_sc51_kurtosis_sum',\n",
       " 'orb_sc51_max_mean',\n",
       " 'orb_sc51_max_std',\n",
       " 'orb_sc51_max_sum',\n",
       " 'orb_sc51_mean_mean',\n",
       " 'orb_sc51_mean_std',\n",
       " 'orb_sc51_mean_sum',\n",
       " 'orb_sc51_skew_mean',\n",
       " 'orb_sc51_skew_std',\n",
       " 'orb_sc51_skew_sum',\n",
       " 'orb_sc51_variance_mean',\n",
       " 'orb_sc51_variance_std',\n",
       " 'orb_sc51_variance_sum',\n",
       " 'orb_sc71_kurtosis_mean',\n",
       " 'orb_sc71_kurtosis_std',\n",
       " 'orb_sc71_kurtosis_sum',\n",
       " 'orb_sc71_max_mean',\n",
       " 'orb_sc71_max_std',\n",
       " 'orb_sc71_max_sum',\n",
       " 'orb_sc71_mean_mean',\n",
       " 'orb_sc71_mean_std',\n",
       " 'orb_sc71_mean_sum',\n",
       " 'orb_sc71_skew_mean',\n",
       " 'orb_sc71_skew_std',\n",
       " 'orb_sc71_skew_sum',\n",
       " 'orb_sc71_variance_mean',\n",
       " 'orb_sc71_variance_std',\n",
       " 'orb_sc71_variance_sum',\n",
       " 'pantex_sc3_min_mean',\n",
       " 'pantex_sc3_min_std',\n",
       " 'pantex_sc3_min_sum',\n",
       " 'pantex_sc5_min_mean',\n",
       " 'pantex_sc5_min_std',\n",
       " 'pantex_sc5_min_sum',\n",
       " 'pantex_sc7_min_mean',\n",
       " 'pantex_sc7_min_std',\n",
       " 'pantex_sc7_min_sum',\n",
       " 'sfs_sc31_max_ll_mean',\n",
       " 'sfs_sc31_max_ll_std',\n",
       " 'sfs_sc31_max_ll_sum',\n",
       " 'sfs_sc31_mean_mean',\n",
       " 'sfs_sc31_mean_std',\n",
       " 'sfs_sc31_mean_sum',\n",
       " 'sfs_sc31_min_ll_mean',\n",
       " 'sfs_sc31_min_ll_std',\n",
       " 'sfs_sc31_min_ll_sum',\n",
       " 'sfs_sc31_roa_mean',\n",
       " 'sfs_sc31_roa_std',\n",
       " 'sfs_sc31_roa_sum',\n",
       " 'sfs_sc31_std_mean',\n",
       " 'sfs_sc31_std_std',\n",
       " 'sfs_sc31_std_sum',\n",
       " 'sfs_sc31_w_mean_mean',\n",
       " 'sfs_sc31_w_mean_std',\n",
       " 'sfs_sc31_w_mean_sum',\n",
       " 'sfs_sc51_max_ll_mean',\n",
       " 'sfs_sc51_max_ll_std',\n",
       " 'sfs_sc51_max_ll_sum',\n",
       " 'sfs_sc51_mean_mean',\n",
       " 'sfs_sc51_mean_std',\n",
       " 'sfs_sc51_mean_sum',\n",
       " 'sfs_sc51_min_ll_mean',\n",
       " 'sfs_sc51_min_ll_std',\n",
       " 'sfs_sc51_min_ll_sum',\n",
       " 'sfs_sc51_roa_mean',\n",
       " 'sfs_sc51_roa_std',\n",
       " 'sfs_sc51_roa_sum',\n",
       " 'sfs_sc51_std_mean',\n",
       " 'sfs_sc51_std_std',\n",
       " 'sfs_sc51_std_sum',\n",
       " 'sfs_sc51_w_mean_mean',\n",
       " 'sfs_sc51_w_mean_std',\n",
       " 'sfs_sc51_w_mean_sum',\n",
       " 'sfs_sc71_max_ll_mean',\n",
       " 'sfs_sc71_max_ll_std',\n",
       " 'sfs_sc71_max_ll_sum',\n",
       " 'sfs_sc71_mean_mean',\n",
       " 'sfs_sc71_mean_std',\n",
       " 'sfs_sc71_mean_sum',\n",
       " 'sfs_sc71_min_ll_mean',\n",
       " 'sfs_sc71_min_ll_std',\n",
       " 'sfs_sc71_min_ll_sum',\n",
       " 'sfs_sc71_roa_mean',\n",
       " 'sfs_sc71_roa_std',\n",
       " 'sfs_sc71_roa_sum',\n",
       " 'sfs_sc71_std_mean',\n",
       " 'sfs_sc71_std_std',\n",
       " 'sfs_sc71_std_sum',\n",
       " 'sfs_sc71_w_mean_mean',\n",
       " 'sfs_sc71_w_mean_std',\n",
       " 'sfs_sc71_w_mean_sum']"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_x = list(filter_by_builtup.axes[1])[3:426]\n",
    "\n",
    "#Check\n",
    "all_x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compute Coorelation of features with population density"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Store all features with the least correlation (stat. significance (p < 0.05)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PCNT_built , fourier_v2_sc31_mean_mean , 0.240073366984 , 2.87163581372e-50\n",
      "PCNT_built , fourier_v2_sc31_mean_std , -0.00545208613436 , 0.73866007617\n",
      "PCNT_built , fourier_v2_sc31_mean_sum , 0.251284381103 , 4.68654782065e-55\n",
      "PCNT_built , fourier_v2_sc31_variance_mean , 0.0390018426174 , 0.0169624059393\n",
      "PCNT_built , fourier_v2_sc31_variance_std , -0.00389581756101 , 0.811574729849\n",
      "PCNT_built , fourier_v2_sc31_variance_sum , 0.227068090245 , 5.10457396024e-45\n",
      "PCNT_built , fourier_v2_sc51_mean_mean , 0.250787316519 , 7.73220906971e-55\n",
      "PCNT_built , fourier_v2_sc51_mean_std , -0.00694104385051 , 0.671023528683\n",
      "PCNT_built , fourier_v2_sc51_mean_sum , 0.247891881445 , 1.39747669806e-53\n",
      "PCNT_built , fourier_v2_sc51_variance_mean , 0.0484787348847 , 0.00299479680342\n",
      "PCNT_built , fourier_v2_sc51_variance_std , 0.00659608938889 , 0.686481582924\n",
      "PCNT_built , fourier_v2_sc51_variance_sum , 0.228152462317 , 1.91668882857e-45\n",
      "PCNT_built , fourier_v2_sc71_mean_mean , 0.261070537141 , 1.95177878341e-59\n",
      "PCNT_built , fourier_v2_sc71_mean_std , -0.00479602807029 , 0.769153929971\n",
      "PCNT_built , fourier_v2_sc71_mean_sum , 0.246091079141 , 8.29645474665e-53\n",
      "PCNT_built , fourier_v2_sc71_variance_mean , 0.0601068530832 , 0.000231950893505\n",
      "PCNT_built , fourier_v2_sc71_variance_std , 0.012542098632 , 0.442778172307\n",
      "PCNT_built , fourier_v2_sc71_variance_sum , 0.229060917436 , 8.40313187546e-46\n",
      "PCNT_built , gabor_sc3_filter_1_mean , 0.185586640543 , 2.19079218122e-30\n",
      "PCNT_built , gabor_sc3_filter_1_std , 0.0817601709077 , 5.40112510975e-07\n",
      "PCNT_built , gabor_sc3_filter_1_sum , 0.223047527019 , 1.84441197642e-43\n",
      "PCNT_built , gabor_sc3_filter_10_mean , 0.219422524101 , 4.40954472327e-42\n",
      "PCNT_built , gabor_sc3_filter_10_std , 0.211132433076 , 5.06634862566e-39\n",
      "PCNT_built , gabor_sc3_filter_10_sum , 0.267467204858 , 2.10933417328e-62\n",
      "PCNT_built , gabor_sc3_filter_11_mean , 0.18630368632 , 1.30116007183e-30\n",
      "PCNT_built , gabor_sc3_filter_11_std , 0.0781816048878 , 1.65581263457e-06\n",
      "PCNT_built , gabor_sc3_filter_11_sum , 0.223162612747 , 1.66605012121e-43\n",
      "PCNT_built , gabor_sc3_filter_12_mean , 0.216684030219 , 4.67173279149e-41\n",
      "PCNT_built , gabor_sc3_filter_12_std , 0.210410469637 , 9.22920686278e-39\n",
      "PCNT_built , gabor_sc3_filter_12_sum , 0.266489210397 , 6.06713650795e-62\n",
      "PCNT_built , gabor_sc3_filter_13_mean , 0.186708670418 , 9.68560288854e-31\n",
      "PCNT_built , gabor_sc3_filter_13_std , 0.0800197571914 , 9.36844738296e-07\n",
      "PCNT_built , gabor_sc3_filter_13_sum , 0.223171603863 , 1.65286058855e-43\n",
      "PCNT_built , gabor_sc3_filter_14_mean , 0.217963526452 , 1.556956301e-41\n",
      "PCNT_built , gabor_sc3_filter_14_std , 0.213763453552 , 5.58859994898e-40\n",
      "PCNT_built , gabor_sc3_filter_14_sum , 0.267287679504 , 2.5616296637e-62\n",
      "PCNT_built , gabor_sc3_filter_2_mean , 0.228518673337 , 1.3752467854e-45\n",
      "PCNT_built , gabor_sc3_filter_2_std , 0.222480802105 , 3.04090751141e-43\n",
      "PCNT_built , gabor_sc3_filter_2_sum , 0.268639623697 , 5.90947695277e-63\n",
      "PCNT_built , gabor_sc3_filter_3_mean , 0.185387228945 , 2.53141606783e-30\n",
      "PCNT_built , gabor_sc3_filter_3_std , 0.0800976481291 , 9.14254296306e-07\n",
      "PCNT_built , gabor_sc3_filter_3_sum , 0.223067715337 , 1.81180504986e-43\n",
      "PCNT_built , gabor_sc3_filter_4_mean , 0.230233367613 , 2.88368842443e-46\n",
      "PCNT_built , gabor_sc3_filter_4_std , 0.220796476588 , 1.33291525039e-42\n",
      "PCNT_built , gabor_sc3_filter_4_sum , 0.268833443932 , 4.78551246234e-63\n",
      "PCNT_built , gabor_sc3_filter_5_mean , 0.185361417044 , 2.57918385443e-30\n",
      "PCNT_built , gabor_sc3_filter_5_std , 0.0788833927493 , 1.33418588486e-06\n",
      "PCNT_built , gabor_sc3_filter_5_sum , 0.223090806418 , 1.77521204982e-43\n",
      "PCNT_built , gabor_sc3_filter_6_mean , 0.228968502954 , 9.13991718509e-46\n",
      "PCNT_built , gabor_sc3_filter_6_std , 0.217751638451 , 1.86858792397e-41\n",
      "PCNT_built , gabor_sc3_filter_6_sum , 0.269185053099 , 3.26231462382e-63\n",
      "PCNT_built , gabor_sc3_filter_7_mean , 0.185518828157 , 2.30118903135e-30\n",
      "PCNT_built , gabor_sc3_filter_7_std , 0.0781365563763 , 1.67882362244e-06\n",
      "PCNT_built , gabor_sc3_filter_7_sum , 0.223116055244 , 1.73604038061e-43\n",
      "PCNT_built , gabor_sc3_filter_8_mean , 0.225072930697 , 3.05395989451e-44\n",
      "PCNT_built , gabor_sc3_filter_8_std , 0.214685318878 , 2.56335052688e-40\n",
      "PCNT_built , gabor_sc3_filter_8_sum , 0.268897705096 , 4.4620544039e-63\n",
      "PCNT_built , gabor_sc3_filter_9_mean , 0.185865434073 , 1.78951296031e-30\n",
      "PCNT_built , gabor_sc3_filter_9_std , 0.0776285365657 , 1.96053429689e-06\n",
      "PCNT_built , gabor_sc3_filter_9_sum , 0.22314242169 , 1.69605209741e-43\n",
      "PCNT_built , gabor_sc3_mean_mean , 0.185835424076 , 1.82894094101e-30\n",
      "PCNT_built , gabor_sc3_mean_std , 0.0833274151177 , 3.25788837759e-07\n",
      "PCNT_built , gabor_sc3_mean_sum , 0.223039188107 , 1.85805017387e-43\n",
      "PCNT_built , gabor_sc3_variance_mean , 0.224620668608 , 4.57010427416e-44\n",
      "PCNT_built , gabor_sc3_variance_std , 0.220062060737 , 2.52917415695e-42\n",
      "PCNT_built , gabor_sc3_variance_sum , 0.268053107648 , 1.11773391789e-62\n",
      "PCNT_built , gabor_sc5_filter_1_mean , 0.183685085037 , 8.63363806218e-30\n",
      "PCNT_built , gabor_sc5_filter_1_std , 0.070208617579 , 1.69617601389e-05\n",
      "PCNT_built , gabor_sc5_filter_1_sum , 0.222945786075 , 2.0178334534e-43\n",
      "PCNT_built , gabor_sc5_filter_10_mean , 0.189113906188 , 1.65439891172e-31\n",
      "PCNT_built , gabor_sc5_filter_10_std , 0.0999376579484 , 8.74546803155e-10\n",
      "PCNT_built , gabor_sc5_filter_10_sum , 0.217403847756 , 2.51994259402e-41\n",
      "PCNT_built , gabor_sc5_filter_11_mean , 0.185693949855 , 2.02673699959e-30\n",
      "PCNT_built , gabor_sc5_filter_11_std , 0.0588420818932 , 0.000313590941708\n",
      "PCNT_built , gabor_sc5_filter_11_sum , 0.22326723452 , 1.51884206553e-43\n",
      "PCNT_built , gabor_sc5_filter_12_mean , 0.189737274627 , 1.04239306972e-31\n",
      "PCNT_built , gabor_sc5_filter_12_std , 0.0965111691565 , 3.22795028394e-09\n",
      "PCNT_built , gabor_sc5_filter_12_sum , 0.217228791482 , 2.92871597743e-41\n",
      "PCNT_built , gabor_sc5_filter_13_mean , 0.187114012698 , 7.20301651119e-31\n",
      "PCNT_built , gabor_sc5_filter_13_std , 0.0646659049498 , 7.45730899811e-05\n",
      "PCNT_built , gabor_sc5_filter_13_sum , 0.223318995267 , 1.45087010046e-43\n",
      "PCNT_built , gabor_sc5_filter_14_mean , 0.19214547409 , 1.72368453845e-32\n",
      "PCNT_built , gabor_sc5_filter_14_std , 0.106277466003 , 6.94491290921e-11\n",
      "PCNT_built , gabor_sc5_filter_14_sum , 0.21750435371 , 2.31143375214e-41\n",
      "PCNT_built , gabor_sc5_filter_2_mean , 0.190480940259 , 5.99506148082e-32\n",
      "PCNT_built , gabor_sc5_filter_2_std , 0.119544591096 , 2.11132673518e-13\n",
      "PCNT_built , gabor_sc5_filter_2_sum , 0.216862593004 , 4.00926386701e-41\n",
      "PCNT_built , gabor_sc5_filter_3_mean , 0.183423423764 , 1.04146134743e-29\n",
      "PCNT_built , gabor_sc5_filter_3_std , 0.0658880018429 , 5.43179184522e-05\n",
      "PCNT_built , gabor_sc5_filter_3_sum , 0.223011716978 , 1.90369220673e-43\n",
      "PCNT_built , gabor_sc5_filter_4_mean , 0.190441169535 , 6.17542184185e-32\n",
      "PCNT_built , gabor_sc5_filter_4_std , 0.114768042289 , 1.83849145539e-12\n",
      "PCNT_built , gabor_sc5_filter_4_sum , 0.217001616304 , 3.55890273244e-41\n",
      "PCNT_built , gabor_sc5_filter_5_mean , 0.183252753668 , 1.17680088426e-29\n",
      "PCNT_built , gabor_sc5_filter_5_std , 0.0634147428618 , 0.000102580735372\n",
      "PCNT_built , gabor_sc5_filter_5_sum , 0.223084139569 , 1.78570103928e-43\n",
      "PCNT_built , gabor_sc5_filter_6_mean , 0.190301547599 , 6.85230802314e-32\n",
      "PCNT_built , gabor_sc5_filter_6_std , 0.112314544958 , 5.40121207357e-12\n",
      "PCNT_built , gabor_sc5_filter_6_sum , 0.217386162336 , 2.55852084615e-41\n",
      "PCNT_built , gabor_sc5_filter_7_mean , 0.183398942282 , 1.05988179469e-29\n",
      "PCNT_built , gabor_sc5_filter_7_std , 0.0617456347078 , 0.000155593712892\n",
      "PCNT_built , gabor_sc5_filter_7_sum , 0.223145909559 , 1.6908313379e-43\n",
      "PCNT_built , gabor_sc5_filter_8_mean , 0.189725942991 , 1.05119779419e-31\n",
      "PCNT_built , gabor_sc5_filter_8_std , 0.108589267914 , 2.65488120014e-11\n",
      "PCNT_built , gabor_sc5_filter_8_sum , 0.217609980536 , 2.11076940879e-41\n",
      "PCNT_built , gabor_sc5_filter_9_mean , 0.184312672607 , 5.49972146711e-30\n",
      "PCNT_built , gabor_sc5_filter_9_std , 0.0587947671194 , 0.000317113462031\n",
      "PCNT_built , gabor_sc5_filter_9_sum , 0.223213501784 , 1.59275476633e-43\n",
      "PCNT_built , gabor_sc5_mean_mean , 0.184143419175 , 6.21197248906e-30\n",
      "PCNT_built , gabor_sc5_mean_std , 0.0732691068339 , 7.13766067963e-06\n",
      "PCNT_built , gabor_sc5_mean_sum , 0.2229043565 , 2.09301307272e-43\n",
      "PCNT_built , gabor_sc5_variance_mean , 0.19016865669 , 7.56478987261e-32\n",
      "PCNT_built , gabor_sc5_variance_std , 0.119481338475 , 2.17395524684e-13\n",
      "PCNT_built , gabor_sc5_variance_sum , 0.216757633417 , 4.38641542215e-41\n",
      "PCNT_built , gabor_sc7_filter_1_mean , 0.181279692091 , 4.78996931715e-29\n",
      "PCNT_built , gabor_sc7_filter_1_std , 0.070012613495 , 1.79077075807e-05\n",
      "PCNT_built , gabor_sc7_filter_1_sum , 0.222784518588 , 2.32652065744e-43\n",
      "PCNT_built , gabor_sc7_filter_10_mean , 0.183407328894 , 1.05353540083e-29\n",
      "PCNT_built , gabor_sc7_filter_10_std , 0.0726691480606 , 8.48045366564e-06\n",
      "PCNT_built , gabor_sc7_filter_10_sum , 0.216866038188 , 3.99744666495e-41\n",
      "PCNT_built , gabor_sc7_filter_11_mean , 0.18478061086 , 3.92510300738e-30\n",
      "PCNT_built , gabor_sc7_filter_11_std , 0.0476691999674 , 0.00351552804773\n",
      "PCNT_built , gabor_sc7_filter_11_sum , 0.223380988541 , 1.37343130278e-43\n",
      "PCNT_built , gabor_sc7_filter_12_mean , 0.185267575088 , 2.76050731986e-30\n",
      "PCNT_built , gabor_sc7_filter_12_std , 0.0662459063306 , 4.94526442643e-05\n",
      "PCNT_built , gabor_sc7_filter_12_sum , 0.216544480048 , 5.26429071867e-41\n",
      "PCNT_built , gabor_sc7_filter_13_mean , 0.187534185598 , 5.29523270988e-31\n",
      "PCNT_built , gabor_sc7_filter_13_std , 0.058557935643 , 0.000335308561394\n",
      "PCNT_built , gabor_sc7_filter_13_sum , 0.223495085657 , 1.24149497198e-43\n",
      "PCNT_built , gabor_sc7_filter_14_mean , 0.189004693732 , 1.79355338081e-31\n",
      "PCNT_built , gabor_sc7_filter_14_std , 0.0814058267283 , 6.04749553048e-07\n",
      "PCNT_built , gabor_sc7_filter_14_sum , 0.216944466322 , 3.7376047496e-41\n",
      "PCNT_built , gabor_sc7_filter_2_mean , 0.185637200046 , 2.11191713119e-30\n",
      "PCNT_built , gabor_sc7_filter_2_std , 0.0978558719804 , 1.9437650428e-09\n",
      "PCNT_built , gabor_sc7_filter_2_sum , 0.215771346563 , 1.01860586017e-40\n",
      "PCNT_built , gabor_sc7_filter_3_mean , 0.181219788107 , 4.99727193945e-29\n",
      "PCNT_built , gabor_sc7_filter_3_std , 0.0613569386594 , 0.000171198599379\n",
      "PCNT_built , gabor_sc7_filter_3_sum , 0.222946934612 , 2.01578798737e-43\n",
      "PCNT_built , gabor_sc7_filter_4_mean , 0.186139486643 , 1.46631360639e-30\n",
      "PCNT_built , gabor_sc7_filter_4_std , 0.0898746800265 , 3.57216431849e-08\n",
      "PCNT_built , gabor_sc7_filter_4_sum , 0.216141687811 , 7.42725346094e-41\n",
      "PCNT_built , gabor_sc7_filter_5_mean , 0.180367071843 , 9.11930441283e-29\n",
      "PCNT_built , gabor_sc7_filter_5_std , 0.0592390920376 , 0.000285444074855\n",
      "PCNT_built , gabor_sc7_filter_5_sum , 0.223086795345 , 1.78151532706e-43\n",
      "PCNT_built , gabor_sc7_filter_6_mean , 0.185621293919 , 2.13642272374e-30\n",
      "PCNT_built , gabor_sc7_filter_6_std , 0.0892803088415 , 4.39483480176e-08\n",
      "PCNT_built , gabor_sc7_filter_6_sum , 0.216886280805 , 3.92870934597e-41\n",
      "PCNT_built , gabor_sc7_filter_7_mean , 0.179988873579 , 1.18961824679e-28\n",
      "PCNT_built , gabor_sc7_filter_7_std , 0.0575707407215 , 0.00042218724776\n",
      "PCNT_built , gabor_sc7_filter_7_sum , 0.223186093222 , 1.63182356371e-43\n",
      "PCNT_built , gabor_sc7_filter_8_mean , 0.18408842495 , 6.46254012277e-30\n",
      "PCNT_built , gabor_sc7_filter_8_std , 0.0863184884824 , 1.21047020393e-07\n",
      "PCNT_built , gabor_sc7_filter_8_sum , 0.217319715799 , 2.70878478305e-41\n",
      "PCNT_built , gabor_sc7_filter_9_mean , 0.181757857202 , 3.41372811805e-29\n",
      "PCNT_built , gabor_sc7_filter_9_std , 0.0498998540788 , 0.00224767103242\n",
      "PCNT_built , gabor_sc7_filter_9_sum , 0.223275887664 , 1.50726227847e-43\n",
      "PCNT_built , gabor_sc7_mean_mean , 0.181532257603 , 4.00574892472e-29\n",
      "PCNT_built , gabor_sc7_mean_std , 0.0741847769678 , 5.47261677359e-06\n",
      "PCNT_built , gabor_sc7_mean_sum , 0.222688406886 , 2.53237421695e-43\n",
      "PCNT_built , gabor_sc7_variance_mean , 0.184343876081 , 5.37755103865e-30\n",
      "PCNT_built , gabor_sc7_variance_std , 0.0984458333146 , 1.5526240031e-09\n",
      "PCNT_built , gabor_sc7_variance_sum , 0.215510319528 , 1.27215348637e-40\n",
      "PCNT_built , hog_sc3_kurtosis_mean , 0.197897482867 , 2.12419422077e-34\n",
      "PCNT_built , hog_sc3_kurtosis_std , 0.145967979204 , 2.7013779696e-19\n",
      "PCNT_built , hog_sc3_kurtosis_sum , 0.258142753755 , 4.17672185294e-58\n",
      "PCNT_built , hog_sc3_mean_mean , 0.10461534743 , 1.36923656018e-10\n",
      "PCNT_built , hog_sc3_mean_std , -0.112939397122 , 4.11379704535e-12\n",
      "PCNT_built , hog_sc3_mean_sum , 0.231544965506 , 8.65427442072e-47\n",
      "PCNT_built , hog_sc3_skew_mean , 0.182572437829 , 1.91288935764e-29\n",
      "PCNT_built , hog_sc3_skew_std , -0.0783292992088 , 1.58247596786e-06\n",
      "PCNT_built , hog_sc3_skew_sum , 0.248183648521 , 1.04572658722e-53\n",
      "PCNT_built , hog_sc3_variance_mean , -0.173142799324 , 1.32210120927e-26\n",
      "PCNT_built , hog_sc3_variance_std , -0.161674118376 , 2.30841036642e-23\n",
      "PCNT_built , hog_sc3_variance_sum , 0.207980555586 , 6.83514394125e-38\n",
      "PCNT_built , hog_sc5_kurtosis_mean , 0.191811620174 , 2.21530758572e-32\n",
      "PCNT_built , hog_sc5_kurtosis_std , 0.033408691918 , 0.0408621370972\n",
      "PCNT_built , hog_sc5_kurtosis_sum , 0.308778456702 , 1.3791685827e-83\n",
      "PCNT_built , hog_sc5_mean_mean , 0.0424509103499 , 0.00935390436777\n",
      "PCNT_built , hog_sc5_mean_std , -0.0443708217044 , 0.00659779177308\n",
      "PCNT_built , hog_sc5_mean_sum , 0.225568993864 , 1.96065815443e-44\n",
      "PCNT_built , hog_sc5_skew_mean , 0.177913807432 , 5.06170735714e-28\n",
      "PCNT_built , hog_sc5_skew_std , 0.1191987192 , 2.47680733971e-13\n",
      "PCNT_built , hog_sc5_skew_sum , 0.259280192192 , 1.27644257502e-58\n",
      "PCNT_built , hog_sc5_variance_mean , -0.158741489766 , 1.4301575849e-22\n",
      "PCNT_built , hog_sc5_variance_std , -0.104567823652 , 1.39585698584e-10\n",
      "PCNT_built , hog_sc5_variance_sum , 0.176252240143 , 1.59350084543e-27\n",
      "PCNT_built , hog_sc7_kurtosis_mean , 0.197998498152 , 1.96393657509e-34\n",
      "PCNT_built , hog_sc7_kurtosis_std , 0.0772974113434 , 2.16802084854e-06\n",
      "PCNT_built , hog_sc7_kurtosis_sum , 0.345218037695 , 2.40779988349e-105\n",
      "PCNT_built , hog_sc7_mean_mean , 0.0332996575359 , 0.0415250840097\n",
      "PCNT_built , hog_sc7_mean_std , -0.0141901739465 , 0.385189960946\n",
      "PCNT_built , hog_sc7_mean_sum , 0.22464153831 , 4.48596938508e-44\n",
      "PCNT_built , hog_sc7_skew_mean , 0.185735915888 , 1.9659476584e-30\n",
      "PCNT_built , hog_sc7_skew_std , 0.1399246236 , 7.65340532986e-18\n",
      "PCNT_built , hog_sc7_skew_sum , 0.279667445945 , 2.73634146164e-68\n",
      "PCNT_built , hog_sc7_variance_mean , -0.148385761128 , 6.80847008997e-20\n",
      "PCNT_built , hog_sc7_variance_std , -0.0772812767565 , 2.17865163456e-06\n",
      "PCNT_built , hog_sc7_variance_sum , 0.157027820941 , 4.08604191456e-22\n",
      "PCNT_built , lac_sc3_lac_mean , 0.173077318334 , 1.38175809805e-26\n",
      "PCNT_built , lac_sc3_lac_std , 0.10510499763 , 1.12228084355e-10\n",
      "PCNT_built , lac_sc3_lac_sum , 0.27294832097 , 5.21000674291e-65\n",
      "PCNT_built , lac_sc5_lac_mean , 0.173077318334 , 1.38175809805e-26\n",
      "PCNT_built , lac_sc5_lac_std , 0.10510499763 , 1.12228084355e-10\n",
      "PCNT_built , lac_sc5_lac_sum , 0.27294832097 , 5.21000674291e-65\n",
      "PCNT_built , lac_sc7_lac_mean , 0.173077318334 , 1.38175809805e-26\n",
      "PCNT_built , lac_sc7_lac_std , 0.10510499763 , 1.12228084355e-10\n",
      "PCNT_built , lac_sc7_lac_sum , 0.27294832097 , 5.21000674291e-65\n",
      "PCNT_built , lbpm_sc3_kurtosis_mean , 0.160597668078 , 4.52678962223e-23\n",
      "PCNT_built , lbpm_sc3_kurtosis_std , -0.0111112218605 , 0.496540913004\n",
      "PCNT_built , lbpm_sc3_kurtosis_sum , 0.241080641932 , 1.09140499129e-50\n",
      "PCNT_built , lbpm_sc3_max_mean , 0.0547024403735 , 0.000808473087129\n",
      "PCNT_built , lbpm_sc3_max_std , 0.0718642082016 , 1.06650291945e-05\n",
      "PCNT_built , lbpm_sc3_max_sum , 0.222642426371 , 2.63716406027e-43\n",
      "PCNT_built , lbpm_sc3_mean_mean , -0.111830766792 , 6.66189292173e-12\n",
      "PCNT_built , lbpm_sc3_mean_std , 0.0401987436384 , 0.0138608680333\n",
      "PCNT_built , lbpm_sc3_mean_sum , 0.220978998369 , 1.13634814836e-42\n",
      "PCNT_built , lbpm_sc3_skew_mean , 0.139884323867 , 7.82221398794e-18\n",
      "PCNT_built , lbpm_sc3_skew_std , -0.0856529380463 , 1.51313705418e-07\n",
      "PCNT_built , lbpm_sc3_skew_sum , 0.234399868891 , 6.13918536472e-48\n",
      "PCNT_built , lbpm_sc3_variance_mean , -0.0908601214254 , 2.52600898585e-08\n",
      "PCNT_built , lbpm_sc3_variance_std , -0.107078352311 , 4.98869672734e-11\n",
      "PCNT_built , lbpm_sc3_variance_sum , 0.201149515127 , 1.66390458387e-35\n",
      "PCNT_built , lbpm_sc5_kurtosis_mean , 0.12597477631 , 9.97780894289e-15\n",
      "PCNT_built , lbpm_sc5_kurtosis_std , -0.0217288506757 , 0.183585568885\n",
      "PCNT_built , lbpm_sc5_kurtosis_sum , 0.239396581938 , 5.48684410342e-50\n",
      "PCNT_built , lbpm_sc5_max_mean , 0.11323067933 , 3.62158410185e-12\n",
      "PCNT_built , lbpm_sc5_max_std , 0.0485073074132 , 0.00297777448603\n",
      "PCNT_built , lbpm_sc5_max_sum , 0.225239920549 , 2.63103650458e-44\n",
      "PCNT_built , lbpm_sc5_mean_mean , -0.121803636622 , 7.35813294699e-14\n",
      "PCNT_built , lbpm_sc5_mean_std , -0.0516403634073 , 0.00156633908271\n",
      "PCNT_built , lbpm_sc5_mean_sum , 0.221481767534 , 7.31679199115e-43\n",
      "PCNT_built , lbpm_sc5_skew_mean , 0.107486989112 , 4.20987872453e-11\n",
      "PCNT_built , lbpm_sc5_skew_std , -0.0654747959257 , 6.0498301261e-05\n",
      "PCNT_built , lbpm_sc5_skew_sum , 0.233211344223 , 1.85520468612e-47\n",
      "PCNT_built , lbpm_sc5_variance_mean , -0.0631477482744 , 0.000109723626921\n",
      "PCNT_built , lbpm_sc5_variance_std , -0.0775133613372 , 2.03044232478e-06\n",
      "PCNT_built , lbpm_sc5_variance_sum , 0.193650174369 , 5.53088195406e-33\n",
      "PCNT_built , lbpm_sc7_kurtosis_mean , 0.104908208241 , 1.21580437921e-10\n",
      "PCNT_built , lbpm_sc7_kurtosis_std , -0.0257401159905 , 0.115173738156\n",
      "PCNT_built , lbpm_sc7_kurtosis_sum , 0.234150989284 , 7.74294562342e-48\n",
      "PCNT_built , lbpm_sc7_max_mean , 0.143765674125 , 9.29077606672e-19\n",
      "PCNT_built , lbpm_sc7_max_std , 0.0122355261469 , 0.454008951738\n",
      "PCNT_built , lbpm_sc7_max_sum , 0.227351123325 , 3.95492427368e-45\n",
      "PCNT_built , lbpm_sc7_mean_mean , -0.062674763985 , 0.000123542147209\n",
      "PCNT_built , lbpm_sc7_mean_std , -0.09209746873 , 1.62643032055e-08\n",
      "PCNT_built , lbpm_sc7_mean_sum , 0.221677094809 , 6.16473671075e-43\n",
      "PCNT_built , lbpm_sc7_skew_mean , 0.0869165632071 , 9.89113864663e-08\n",
      "PCNT_built , lbpm_sc7_skew_std , -0.0545235664103 , 0.000841086486816\n",
      "PCNT_built , lbpm_sc7_skew_sum , 0.229680217444 , 4.77987837484e-46\n",
      "PCNT_built , lbpm_sc7_variance_mean , -0.0473460631414 , 0.00374544664563\n",
      "PCNT_built , lbpm_sc7_variance_std , -0.0618899571944 , 0.000150148159703\n",
      "PCNT_built , lbpm_sc7_variance_sum , 0.191600149681 , 2.5963178593e-32\n",
      "PCNT_built , lsr_sc3_line_contrast_mean , 0.0471925819416 , 0.00385936683966\n",
      "PCNT_built , lsr_sc3_line_contrast_std , 0.0862772542498 , 1.22738221748e-07\n",
      "PCNT_built , lsr_sc3_line_contrast_sum , 0.242547598392 , 2.64604412381e-51\n",
      "PCNT_built , lsr_sc3_line_length_mean , 0.0426399266857 , 0.00904302636151\n",
      "PCNT_built , lsr_sc3_line_length_std , 0.0936619044148 , 9.24552294798e-09\n",
      "PCNT_built , lsr_sc3_line_length_sum , 0.240124165343 , 2.73519197628e-50\n",
      "PCNT_built , lsr_sc3_line_mean_mean , 0.0256999465736 , 0.115742176171\n",
      "PCNT_built , lsr_sc3_line_mean_std , 0.00295203641099 , 0.856648311852\n",
      "PCNT_built , lsr_sc3_line_mean_sum , 0.233265523495 , 1.76423648069e-47\n",
      "PCNT_built , lsr_sc5_line_contrast_mean , 0.0809784144293 , 6.92662364781e-07\n",
      "PCNT_built , lsr_sc5_line_contrast_std , -0.0464443656757 , 0.00446107969349\n",
      "PCNT_built , lsr_sc5_line_contrast_sum , 0.255074678201 , 9.92507189123e-57\n",
      "PCNT_built , lsr_sc5_line_length_mean , 0.0776463009372 , 1.9499597272e-06\n",
      "PCNT_built , lsr_sc5_line_length_std , -0.0429002998565 , 0.00862989286603\n",
      "PCNT_built , lsr_sc5_line_length_sum , 0.253910522779 , 3.2653947947e-56\n",
      "PCNT_built , lsr_sc5_line_mean_mean , 0.0205881477581 , 0.20768016205\n",
      "PCNT_built , lsr_sc5_line_mean_std , -0.00318692792805 , 0.845380414913\n",
      "PCNT_built , lsr_sc5_line_mean_sum , 0.234847004196 , 4.04319397246e-48\n",
      "PCNT_built , lsr_sc7_line_contrast_mean , 0.0894517016795 , 4.14043232462e-08\n",
      "PCNT_built , lsr_sc7_line_contrast_std , -0.068535051205 , 2.68385185101e-05\n",
      "PCNT_built , lsr_sc7_line_contrast_sum , 0.254866414763 , 1.22872815635e-56\n",
      "PCNT_built , lsr_sc7_line_length_mean , 0.0859089459033 , 1.38893025116e-07\n",
      "PCNT_built , lsr_sc7_line_length_std , -0.06638926201 , 4.76222014116e-05\n",
      "PCNT_built , lsr_sc7_line_length_sum , 0.254042302879 , 2.85445794715e-56\n",
      "PCNT_built , lsr_sc7_line_mean_mean , 0.0199647790702 , 0.221778382005\n",
      "PCNT_built , lsr_sc7_line_mean_std , 0.0120583880251 , 0.460570621649\n",
      "PCNT_built , lsr_sc7_line_mean_sum , 0.235466610346 , 2.26329196164e-48\n",
      "PCNT_built , mean_sc3_mean_mean , 0.186537410897 , 1.09743160469e-30\n",
      "PCNT_built , mean_sc3_mean_std , 0.0937926082226 , 8.81570124809e-09\n",
      "PCNT_built , mean_sc3_mean_sum , 0.223088909188 , 1.7781907192e-43\n",
      "PCNT_built , mean_sc3_variance_mean , 0.258830220772 , 2.04163167403e-58\n",
      "PCNT_built , mean_sc3_variance_std , 0.253660016166 , 4.21579359066e-56\n",
      "PCNT_built , mean_sc3_variance_sum , 0.3061201634 , 4.08685075119e-82\n",
      "PCNT_built , mean_sc5_mean_mean , 0.186456980581 , 1.16369091481e-30\n",
      "PCNT_built , mean_sc5_mean_std , 0.0741655806038 , 5.50335060102e-06\n",
      "PCNT_built , mean_sc5_mean_sum , 0.223097751832 , 1.76434995368e-43\n",
      "PCNT_built , mean_sc5_variance_mean , 0.200619919053 , 2.52678059067e-35\n",
      "PCNT_built , mean_sc5_variance_std , 0.14962722268 , 3.32517461485e-20\n",
      "PCNT_built , mean_sc5_variance_sum , 0.220005389568 , 2.6570648772e-42\n",
      "PCNT_built , mean_sc7_mean_mean , 0.186416572292 , 1.19846260685e-30\n",
      "PCNT_built , mean_sc7_mean_std , 0.0607995972304 , 0.000196158039566\n",
      "PCNT_built , mean_sc7_mean_sum , 0.223110412953 , 1.74471871326e-43\n",
      "PCNT_built , mean_sc7_variance_mean , 0.194067980153 , 4.02711057297e-33\n",
      "PCNT_built , mean_sc7_variance_std , 0.103628143119 , 2.03904565959e-10\n",
      "PCNT_built , mean_sc7_variance_sum , 0.217586163329 , 2.15444725751e-41\n",
      "PCNT_built , ndvi_sc3_mean_mean , -0.258314490997 , 3.49355451018e-58\n",
      "PCNT_built , ndvi_sc3_mean_std , 0.0925852487713 , 1.36514381366e-08\n",
      "PCNT_built , ndvi_sc3_mean_sum , 0.17860383768 , 3.13342720233e-28\n",
      "PCNT_built , ndvi_sc3_variance_mean , 0.16372499773 , 6.31659649377e-24\n",
      "PCNT_built , ndvi_sc3_variance_std , 0.0992201541566 , 1.15380488137e-09\n",
      "PCNT_built , ndvi_sc3_variance_sum , 0.352973755886 , 2.27632030584e-110\n",
      "PCNT_built , ndvi_sc5_mean_mean , -0.257750668346 , 6.27636479965e-58\n",
      "PCNT_built , ndvi_sc5_mean_std , 0.0837473525271 , 2.8407822565e-07\n",
      "PCNT_built , ndvi_sc5_mean_sum , 0.178653079025 , 3.02778020686e-28\n",
      "PCNT_built , ndvi_sc5_variance_mean , -0.229158001466 , 7.69269113591e-46\n",
      "PCNT_built , ndvi_sc5_variance_std , 0.101493466898 , 4.76347687141e-10\n",
      "PCNT_built , ndvi_sc5_variance_sum , 0.173408801834 , 1.10490182911e-26\n",
      "PCNT_built , ndvi_sc7_mean_mean , -0.257070269301 , 1.27033287361e-57\n",
      "PCNT_built , ndvi_sc7_mean_std , 0.0773221407753 , 2.15182367049e-06\n",
      "PCNT_built , ndvi_sc7_mean_sum , 0.178711870524 , 2.90626064498e-28\n",
      "PCNT_built , ndvi_sc7_variance_mean , -0.239894649185 , 3.40776445368e-50\n",
      "PCNT_built , ndvi_sc7_variance_std , 0.054774859481 , 0.000795605924856\n",
      "PCNT_built , ndvi_sc7_variance_sum , 0.161132362817 , 3.24162931229e-23\n",
      "PCNT_built , orb_sc31_kurtosis_mean , 0.240001806588 , 3.07541212463e-50\n",
      "PCNT_built , orb_sc31_kurtosis_std , 0.280289983072 , 1.3446731741e-68\n",
      "PCNT_built , orb_sc31_kurtosis_sum , 0.418760481091 , 4.98222636034e-159\n",
      "PCNT_built , orb_sc31_max_mean , 0.261540135762 , 1.18974216175e-59\n",
      "PCNT_built , orb_sc31_max_std , 0.287859772181 , 2.05388943436e-72\n",
      "PCNT_built , orb_sc31_max_sum , 0.327635853398 , 1.79359644204e-94\n",
      "PCNT_built , orb_sc31_mean_mean , 0.245323304675 , 1.76512069992e-52\n",
      "PCNT_built , orb_sc31_mean_std , 0.27938510863 , 3.77437130713e-68\n",
      "PCNT_built , orb_sc31_mean_sum , 0.29065977103 , 7.42712080156e-74\n",
      "PCNT_built , orb_sc31_skew_mean , 0.230329397392 , 2.64112027811e-46\n",
      "PCNT_built , orb_sc31_skew_std , 0.279944239167 , 1.99562703674e-68\n",
      "PCNT_built , orb_sc31_skew_sum , 0.41064628024 , 2.06874340551e-152\n",
      "PCNT_built , orb_sc31_variance_mean , 0.200780180418 , 2.22697944318e-35\n",
      "PCNT_built , orb_sc31_variance_std , 0.22702049067 , 5.32822026128e-45\n",
      "PCNT_built , orb_sc31_variance_sum , 0.221203980551 , 9.33286340465e-43\n",
      "PCNT_built , orb_sc51_kurtosis_mean , 0.107424666299 , 4.32046355648e-11\n",
      "PCNT_built , orb_sc51_kurtosis_std , 0.208464923589 , 4.59492966564e-38\n",
      "PCNT_built , orb_sc51_kurtosis_sum , 0.295194414427 , 3.16900559741e-76\n",
      "PCNT_built , orb_sc51_max_mean , 0.280088045428 , 1.69352783839e-68\n",
      "PCNT_built , orb_sc51_max_std , 0.28542215721 , 3.58427181151e-71\n",
      "PCNT_built , orb_sc51_max_sum , 0.332391088884 , 2.4164686141e-97\n",
      "PCNT_built , orb_sc51_mean_mean , 0.271060032178 , 4.18744808903e-64\n",
      "PCNT_built , orb_sc51_mean_std , 0.289643566695 , 2.48871935941e-73\n",
      "PCNT_built , orb_sc51_mean_sum , 0.303207034926 , 1.6095889539e-80\n",
      "PCNT_built , orb_sc51_skew_mean , 0.117320503607 , 5.84697464577e-13\n",
      "PCNT_built , orb_sc51_skew_std , 0.201554606885 , 1.20780933185e-35\n",
      "PCNT_built , orb_sc51_skew_sum , 0.304196988905 , 4.6412409298e-81\n",
      "PCNT_built , orb_sc51_variance_mean , 0.205791669232 , 4.06212152697e-37\n",
      "PCNT_built , orb_sc51_variance_std , 0.222680177737 , 2.55081940429e-43\n",
      "PCNT_built , orb_sc51_variance_sum , 0.205201479123 , 6.54544592297e-37\n",
      "PCNT_built , orb_sc71_kurtosis_mean , -0.0115929960484 , 0.478060057218\n",
      "PCNT_built , orb_sc71_kurtosis_std , 0.0793349892918 , 1.15996005148e-06\n",
      "PCNT_built , orb_sc71_kurtosis_sum , 0.190799224781 , 4.72790280694e-32\n",
      "PCNT_built , orb_sc71_max_mean , 0.296398639221 , 7.31594539849e-77\n",
      "PCNT_built , orb_sc71_max_std , 0.279243661513 , 4.43361395137e-68\n",
      "PCNT_built , orb_sc71_max_sum , 0.334805940412 , 8.04890388954e-99\n",
      "PCNT_built , orb_sc71_mean_mean , 0.297120152297 , 3.02932302378e-77\n",
      "PCNT_built , orb_sc71_mean_std , 0.296498844284 , 6.47373959079e-77\n",
      "PCNT_built , orb_sc71_mean_sum , 0.316493563387 , 6.0382466187e-88\n",
      "PCNT_built , orb_sc71_skew_mean , -0.000382183360187 , 0.98134182406\n",
      "PCNT_built , orb_sc71_skew_std , 0.0821471003624 , 4.77142549875e-07\n",
      "PCNT_built , orb_sc71_skew_sum , 0.202906923648 , 4.1244606918e-36\n",
      "PCNT_built , orb_sc71_variance_mean , 0.214990692758 , 1.97847588203e-40\n",
      "PCNT_built , orb_sc71_variance_std , 0.22349774392 , 1.23857629956e-43\n",
      "PCNT_built , orb_sc71_variance_sum , 0.19636290349 , 6.95726668622e-34\n",
      "PCNT_built , pantex_sc3_min_mean , 0.272320117963 , 1.04413867903e-64\n",
      "PCNT_built , pantex_sc3_min_std , 0.285544119233 , 3.10858282185e-71\n",
      "PCNT_built , pantex_sc3_min_sum , 0.347099925319 , 1.49801667518e-106\n",
      "PCNT_built , pantex_sc5_min_mean , 0.228049217468 , 2.10451184484e-45\n",
      "PCNT_built , pantex_sc5_min_std , 0.278552987812 , 9.71733540687e-68\n",
      "PCNT_built , pantex_sc5_min_sum , 0.311719585555 , 3.1143127927e-85\n",
      "PCNT_built , pantex_sc7_min_mean , 0.226564218014 , 8.03294720178e-45\n",
      "PCNT_built , pantex_sc7_min_std , 0.269832754826 , 1.60820004119e-63\n",
      "PCNT_built , pantex_sc7_min_sum , 0.307659273087 , 5.7692964087e-83\n",
      "PCNT_built , sfs_sc31_max_ll_mean , 0.199427999365 , 6.44235759186e-35\n",
      "PCNT_built , sfs_sc31_max_ll_std , -0.190869435315 , 4.48637450922e-32\n",
      "PCNT_built , sfs_sc31_max_ll_sum , 0.275407400207 , 3.36706824458e-66\n",
      "PCNT_built , sfs_sc31_mean_mean , 0.192325222656 , 1.50557030824e-32\n",
      "PCNT_built , sfs_sc31_mean_std , -0.0632922064165 , 0.000105802686722\n",
      "PCNT_built , sfs_sc31_mean_sum , 0.267193033781 , 2.83772654919e-62\n",
      "PCNT_built , sfs_sc31_min_ll_mean , -0.00950282358826 , 0.56089479208\n",
      "PCNT_built , sfs_sc31_min_ll_std , -0.00630516386077 , 0.699621509228\n",
      "PCNT_built , sfs_sc31_min_ll_sum , 0.0469008428397 , 0.00408462135841\n",
      "PCNT_built , sfs_sc31_roa_mean , -0.125449727292 , 1.28786103048e-14\n",
      "PCNT_built , sfs_sc31_roa_std , 0.0279802226217 , 0.086802723377\n",
      "PCNT_built , sfs_sc31_roa_sum , 0.220628014649 , 1.54418960105e-42\n",
      "PCNT_built , sfs_sc31_std_mean , 0.0428013129783 , 0.00878492543247\n",
      "PCNT_built , sfs_sc31_std_std , -0.148051081349 , 8.25087991048e-20\n",
      "PCNT_built , sfs_sc31_std_sum , 0.23404743296 , 8.52729505139e-48\n",
      "PCNT_built , sfs_sc31_w_mean_mean , -0.081250177136 , 6.35441722748e-07\n",
      "PCNT_built , sfs_sc31_w_mean_std , -0.100181200123 , 7.95685092214e-10\n",
      "PCNT_built , sfs_sc31_w_mean_sum , 0.163520898552 , 7.19157368696e-24\n",
      "PCNT_built , sfs_sc51_max_ll_mean , -0.0354185453459 , 0.0301569245664\n",
      "PCNT_built , sfs_sc51_max_ll_std , 0.0402037624765 , 0.0138489937539\n",
      "PCNT_built , sfs_sc51_max_ll_sum , 0.229249068561 , 7.08070896893e-46\n",
      "PCNT_built , sfs_sc51_mean_mean , 0.176607521379 , 1.24815456662e-27\n",
      "PCNT_built , sfs_sc51_mean_std , -0.065136341433 , 6.60506183514e-05\n",
      "PCNT_built , sfs_sc51_mean_sum , 0.26108747951 , 1.91726519727e-59\n",
      "PCNT_built , sfs_sc51_min_ll_mean , -0.00761276658901 , 0.641323159512\n",
      "PCNT_built , sfs_sc51_min_ll_std , -0.00823467055803 , 0.614326633531\n",
      "PCNT_built , sfs_sc51_min_ll_sum , 0.0844525809938 , 2.25361526967e-07\n",
      "PCNT_built , sfs_sc51_roa_mean , -0.116129074185 , 1.00119012474e-12\n",
      "PCNT_built , sfs_sc51_roa_std , -0.0257675204609 , 0.114787198165\n",
      "PCNT_built , sfs_sc51_roa_sum , 0.220938930889 , 1.17686776219e-42\n",
      "PCNT_built , sfs_sc51_std_mean , 0.14606621648 , 2.5554167647e-19\n",
      "PCNT_built , sfs_sc51_std_std , -0.026649605058 , 0.102881706491\n",
      "PCNT_built , sfs_sc51_std_sum , 0.253132866978 , 7.21004134364e-56\n",
      "PCNT_built , sfs_sc51_w_mean_mean , -0.14294074878 , 1.46845429891e-18\n",
      "PCNT_built , sfs_sc51_w_mean_std , -0.0931618429369 , 1.10859806033e-08\n",
      "PCNT_built , sfs_sc51_w_mean_sum , 0.140448115111 , 5.7613416865e-18\n",
      "PCNT_built , sfs_sc71_max_ll_mean , -0.122394140851 , 5.56796161296e-14\n",
      "PCNT_built , sfs_sc71_max_ll_std , -0.0178305219872 , 0.275194677696\n",
      "PCNT_built , sfs_sc71_max_ll_sum , 0.204636751333 , 1.03178180079e-36\n",
      "PCNT_built , sfs_sc71_mean_mean , -0.0576955621487 , 0.000410144552897\n",
      "PCNT_built , sfs_sc71_mean_std , 0.00026869550149 , 0.986881692208\n",
      "PCNT_built , sfs_sc71_mean_sum , 0.225008469637 , 3.23473473694e-44\n",
      "PCNT_built , sfs_sc71_min_ll_mean , -0.0300566447652 , 0.0658194283963\n",
      "PCNT_built , sfs_sc71_min_ll_std , -0.00945491017015 , 0.562872049242\n",
      "PCNT_built , sfs_sc71_min_ll_sum , -0.0127910679945 , 0.433775610998\n",
      "PCNT_built , sfs_sc71_roa_mean , -0.0960169066684 , 3.88286708859e-09\n",
      "PCNT_built , sfs_sc71_roa_std , -0.044650896348 , 0.00626355803313\n",
      "PCNT_built , sfs_sc71_roa_sum , 0.221075454818 , 1.0444031955e-42\n",
      "PCNT_built , sfs_sc71_std_mean , -0.0822209484628 , 4.65956985827e-07\n",
      "PCNT_built , sfs_sc71_std_std , 0.00442462187958 , 0.786580084989\n",
      "PCNT_built , sfs_sc71_std_sum , 0.219406948563 , 4.46954912363e-42\n",
      "PCNT_built , sfs_sc71_w_mean_mean , -0.164575137144 , 3.67300810104e-24\n",
      "PCNT_built , sfs_sc71_w_mean_std , -0.0831390139686 , 3.46367655878e-07\n",
      "PCNT_built , sfs_sc71_w_mean_sum , 0.124606723139 , 1.93576204055e-14\n",
      "PCNT_built 294\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "y_dict = {}\n",
    "x = []\n",
    "\n",
    "for x_var in all_x:\n",
    "    \n",
    "    #Calculate the Pearson statistics, \n",
    "    # returns the Pearson value and p value\n",
    "    \n",
    "    p = stats.pearsonr(filter_by_builtup[x_var],pop_count)\n",
    "    \n",
    "    # print back for mike\n",
    "    print (y_var + \" , \" + x_var + \" , \" +  str(p[0]) + \" , \" + str(p[1]))\n",
    "    \n",
    "    #If p < 0.05 append to list x\n",
    "    if p[1] < 0.05:\n",
    "        x.append([x_var,abs(p[0])])\n",
    "\n",
    "#List x is made into a DataFrame \n",
    "# which is sorted by the absolute values of the Pearson values\n",
    "x_df = pd.DataFrame(x,columns=[\"x_var\",\"abs_r2\"]).sort_values(\"abs_r2\",ascending=False)\n",
    "\n",
    "\n",
    "#The dependent variable dictionary is given an entry \n",
    "# where the key is the name of the dependent variable\n",
    "# and the value is a list of top 200 most significant values\n",
    "\n",
    "y_dict[y_var] = list(x_df[\"x_var\"][0:294])\n",
    "\n",
    "#Print out each dependent variable and \n",
    "#the number of x values that remain to check completion\n",
    "\n",
    "for key in y_dict.keys():\n",
    "    print(key,len(y_dict[key]))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Correlation Significance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x_var</th>\n",
       "      <th>abs_r2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>300</th>\n",
       "      <td>orb_sc31_kurtosis_sum</td>\n",
       "      <td>0.418760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>309</th>\n",
       "      <td>orb_sc31_skew_sum</td>\n",
       "      <td>0.410646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>285</th>\n",
       "      <td>ndvi_sc3_variance_sum</td>\n",
       "      <td>0.352974</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>343</th>\n",
       "      <td>pantex_sc3_min_sum</td>\n",
       "      <td>0.347100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>hog_sc7_kurtosis_sum</td>\n",
       "      <td>0.345218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>332</th>\n",
       "      <td>orb_sc71_max_sum</td>\n",
       "      <td>0.334806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>318</th>\n",
       "      <td>orb_sc51_max_sum</td>\n",
       "      <td>0.332391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>303</th>\n",
       "      <td>orb_sc31_max_sum</td>\n",
       "      <td>0.327636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>335</th>\n",
       "      <td>orb_sc71_mean_sum</td>\n",
       "      <td>0.316494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>346</th>\n",
       "      <td>pantex_sc5_min_sum</td>\n",
       "      <td>0.311720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>hog_sc5_kurtosis_sum</td>\n",
       "      <td>0.308778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>349</th>\n",
       "      <td>pantex_sc7_min_sum</td>\n",
       "      <td>0.307659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>mean_sc3_variance_sum</td>\n",
       "      <td>0.306120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>324</th>\n",
       "      <td>orb_sc51_skew_sum</td>\n",
       "      <td>0.304197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>321</th>\n",
       "      <td>orb_sc51_mean_sum</td>\n",
       "      <td>0.303207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>333</th>\n",
       "      <td>orb_sc71_mean_mean</td>\n",
       "      <td>0.297120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>334</th>\n",
       "      <td>orb_sc71_mean_std</td>\n",
       "      <td>0.296499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>330</th>\n",
       "      <td>orb_sc71_max_mean</td>\n",
       "      <td>0.296399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>315</th>\n",
       "      <td>orb_sc51_kurtosis_sum</td>\n",
       "      <td>0.295194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>306</th>\n",
       "      <td>orb_sc31_mean_sum</td>\n",
       "      <td>0.290660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320</th>\n",
       "      <td>orb_sc51_mean_std</td>\n",
       "      <td>0.289644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>orb_sc31_max_std</td>\n",
       "      <td>0.287860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>342</th>\n",
       "      <td>pantex_sc3_min_std</td>\n",
       "      <td>0.285544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>317</th>\n",
       "      <td>orb_sc51_max_std</td>\n",
       "      <td>0.285422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299</th>\n",
       "      <td>orb_sc31_kurtosis_std</td>\n",
       "      <td>0.280290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>316</th>\n",
       "      <td>orb_sc51_max_mean</td>\n",
       "      <td>0.280088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308</th>\n",
       "      <td>orb_sc31_skew_std</td>\n",
       "      <td>0.279944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>187</th>\n",
       "      <td>hog_sc7_skew_sum</td>\n",
       "      <td>0.279667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>305</th>\n",
       "      <td>orb_sc31_mean_std</td>\n",
       "      <td>0.279385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>331</th>\n",
       "      <td>orb_sc71_max_std</td>\n",
       "      <td>0.279244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>gabor_sc7_filter_5_std</td>\n",
       "      <td>0.059239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>gabor_sc5_filter_11_std</td>\n",
       "      <td>0.058842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>gabor_sc5_filter_9_std</td>\n",
       "      <td>0.058795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121</th>\n",
       "      <td>gabor_sc7_filter_13_std</td>\n",
       "      <td>0.058558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>381</th>\n",
       "      <td>sfs_sc71_mean_mean</td>\n",
       "      <td>0.057696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142</th>\n",
       "      <td>gabor_sc7_filter_7_std</td>\n",
       "      <td>0.057571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>296</th>\n",
       "      <td>ndvi_sc7_variance_std</td>\n",
       "      <td>0.054775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>202</th>\n",
       "      <td>lbpm_sc3_max_mean</td>\n",
       "      <td>0.054702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236</th>\n",
       "      <td>lbpm_sc7_skew_std</td>\n",
       "      <td>0.054524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220</th>\n",
       "      <td>lbpm_sc5_mean_std</td>\n",
       "      <td>0.051640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>gabor_sc7_filter_9_std</td>\n",
       "      <td>0.049900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>217</th>\n",
       "      <td>lbpm_sc5_max_std</td>\n",
       "      <td>0.048507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>fourier_v2_sc51_variance_mean</td>\n",
       "      <td>0.048479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>gabor_sc7_filter_11_std</td>\n",
       "      <td>0.047669</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238</th>\n",
       "      <td>lbpm_sc7_variance_mean</td>\n",
       "      <td>0.047346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>241</th>\n",
       "      <td>lsr_sc3_line_contrast_mean</td>\n",
       "      <td>0.047193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>356</th>\n",
       "      <td>sfs_sc31_min_ll_sum</td>\n",
       "      <td>0.046901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249</th>\n",
       "      <td>lsr_sc5_line_contrast_std</td>\n",
       "      <td>0.046444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>384</th>\n",
       "      <td>sfs_sc71_roa_std</td>\n",
       "      <td>0.044651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>hog_sc5_mean_std</td>\n",
       "      <td>0.044371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>252</th>\n",
       "      <td>lsr_sc5_line_length_std</td>\n",
       "      <td>0.042900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>359</th>\n",
       "      <td>sfs_sc31_std_mean</td>\n",
       "      <td>0.042801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>244</th>\n",
       "      <td>lsr_sc3_line_length_mean</td>\n",
       "      <td>0.042640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>171</th>\n",
       "      <td>hog_sc5_mean_mean</td>\n",
       "      <td>0.042451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>366</th>\n",
       "      <td>sfs_sc51_max_ll_std</td>\n",
       "      <td>0.040204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206</th>\n",
       "      <td>lbpm_sc3_mean_std</td>\n",
       "      <td>0.040199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>fourier_v2_sc31_variance_mean</td>\n",
       "      <td>0.039002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>365</th>\n",
       "      <td>sfs_sc51_max_ll_mean</td>\n",
       "      <td>0.035419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169</th>\n",
       "      <td>hog_sc5_kurtosis_std</td>\n",
       "      <td>0.033409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>183</th>\n",
       "      <td>hog_sc7_mean_mean</td>\n",
       "      <td>0.033300</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>391 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             x_var    abs_r2\n",
       "300          orb_sc31_kurtosis_sum  0.418760\n",
       "309              orb_sc31_skew_sum  0.410646\n",
       "285          ndvi_sc3_variance_sum  0.352974\n",
       "343             pantex_sc3_min_sum  0.347100\n",
       "182           hog_sc7_kurtosis_sum  0.345218\n",
       "332               orb_sc71_max_sum  0.334806\n",
       "318               orb_sc51_max_sum  0.332391\n",
       "303               orb_sc31_max_sum  0.327636\n",
       "335              orb_sc71_mean_sum  0.316494\n",
       "346             pantex_sc5_min_sum  0.311720\n",
       "170           hog_sc5_kurtosis_sum  0.308778\n",
       "349             pantex_sc7_min_sum  0.307659\n",
       "267          mean_sc3_variance_sum  0.306120\n",
       "324              orb_sc51_skew_sum  0.304197\n",
       "321              orb_sc51_mean_sum  0.303207\n",
       "333             orb_sc71_mean_mean  0.297120\n",
       "334              orb_sc71_mean_std  0.296499\n",
       "330              orb_sc71_max_mean  0.296399\n",
       "315          orb_sc51_kurtosis_sum  0.295194\n",
       "306              orb_sc31_mean_sum  0.290660\n",
       "320              orb_sc51_mean_std  0.289644\n",
       "302               orb_sc31_max_std  0.287860\n",
       "342             pantex_sc3_min_std  0.285544\n",
       "317               orb_sc51_max_std  0.285422\n",
       "299          orb_sc31_kurtosis_std  0.280290\n",
       "316              orb_sc51_max_mean  0.280088\n",
       "308              orb_sc31_skew_std  0.279944\n",
       "187               hog_sc7_skew_sum  0.279667\n",
       "305              orb_sc31_mean_std  0.279385\n",
       "331               orb_sc71_max_std  0.279244\n",
       "..                             ...       ...\n",
       "136         gabor_sc7_filter_5_std  0.059239\n",
       "67         gabor_sc5_filter_11_std  0.058842\n",
       "100         gabor_sc5_filter_9_std  0.058795\n",
       "121        gabor_sc7_filter_13_std  0.058558\n",
       "381             sfs_sc71_mean_mean  0.057696\n",
       "142         gabor_sc7_filter_7_std  0.057571\n",
       "296          ndvi_sc7_variance_std  0.054775\n",
       "202              lbpm_sc3_max_mean  0.054702\n",
       "236              lbpm_sc7_skew_std  0.054524\n",
       "220              lbpm_sc5_mean_std  0.051640\n",
       "148         gabor_sc7_filter_9_std  0.049900\n",
       "217               lbpm_sc5_max_std  0.048507\n",
       "6    fourier_v2_sc51_variance_mean  0.048479\n",
       "115        gabor_sc7_filter_11_std  0.047669\n",
       "238         lbpm_sc7_variance_mean  0.047346\n",
       "241     lsr_sc3_line_contrast_mean  0.047193\n",
       "356            sfs_sc31_min_ll_sum  0.046901\n",
       "249      lsr_sc5_line_contrast_std  0.046444\n",
       "384               sfs_sc71_roa_std  0.044651\n",
       "172               hog_sc5_mean_std  0.044371\n",
       "252        lsr_sc5_line_length_std  0.042900\n",
       "359              sfs_sc31_std_mean  0.042801\n",
       "244       lsr_sc3_line_length_mean  0.042640\n",
       "171              hog_sc5_mean_mean  0.042451\n",
       "366            sfs_sc51_max_ll_std  0.040204\n",
       "206              lbpm_sc3_mean_std  0.040199\n",
       "2    fourier_v2_sc31_variance_mean  0.039002\n",
       "365           sfs_sc51_max_ll_mean  0.035419\n",
       "169           hog_sc5_kurtosis_std  0.033409\n",
       "183              hog_sc7_mean_mean  0.033300\n",
       "\n",
       "[391 rows x 2 columns]"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = y_var\n",
    "\n",
    "#Initialize the output dictionary, Y_D, \n",
    "# with each key being a dependent variable and the values being the results of the analyses\n",
    "\n",
    "Y_D = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dictionary Models is used to store each result object for later use if needed\n",
    "\n",
    "Models ={}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each dependent variable y in the list of all dependent values, calibrate the model.\n",
    "Add new key to the output dictionary where y is the dependent variable curently being processed and the values are empty for now"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_D[y]={}\n",
    "\n",
    "#Get independent variables from the variable dictionary and store in list x_vars\n",
    "x_vars = y_dict[y]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3747,)"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create a new dataframe for scaled and centered values\n",
    "scale_df = pd.DataFrame()\n",
    "\n",
    "#Scale and center the values\n",
    "scale_df[y] = scale(pop_density, with_mean=True, with_std=True)\n",
    "\n",
    "scale_df[y].shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Filter data to less correlated features and compute elastic net"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import preprocessing\n",
    "\n",
    "scaler = preprocessing.StandardScaler()\n",
    "#scaled_df = scaler.fit_transform(filter_by_builtup[x])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/adbe/anaconda3/lib/python3.6/site-packages/sklearn/preprocessing/data.py:164: UserWarning: Numerical issues were encountered when centering the data and might not be solved. Dataset may contain too large values. You may need to prescale your features.\n",
      "  warnings.warn(\"Numerical issues were encountered \"\n"
     ]
    }
   ],
   "source": [
    "for x in x_vars:\n",
    "    scale_df[x] = scale(filter_by_builtup[x], with_mean=True, with_std=True)\n",
    "    \n",
    "    \n",
    "result = ElasticNetCV(max_iter=1e8,\n",
    "                    alphas = [0.0005, 0.001, 0.01, 0.03, 0.05, 0.1],\n",
    "                    l1_ratio =[.1, .5, .7, .9, .95, .99, 1],\n",
    "                    verbose= False,\n",
    "                    n_jobs = -1, \n",
    "                    cv=5, \n",
    "                    selection = 'random',\n",
    "                    fit_intercept=False)\n",
    "\n",
    "\n",
    "#Fit the model with the scaled data\n",
    "result.fit(scale_df[x_vars],scale_df[y])\n",
    "#Append the model to the Models dictionary\n",
    "Models[y] = result\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ElasticNetCV(alphas=[0.0005, 0.001, 0.01, 0.03, 0.05, 0.1], copy_X=True, cv=5,\n",
       "       eps=0.001, fit_intercept=False,\n",
       "       l1_ratio=[0.1, 0.5, 0.7, 0.9, 0.95, 0.99, 1], max_iter=100000000.0,\n",
       "       n_alphas=100, n_jobs=-1, normalize=False, positive=False,\n",
       "       precompute='auto', random_state=None, selection='random',\n",
       "       tol=0.0001, verbose=False)"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2: 0.52 Alpha: 0.1 l1_ratio: 0.1\n"
     ]
    }
   ],
   "source": [
    "opt_alpha, opt_l1_ratio = result.alpha_, result.l1_ratio_\n",
    "\n",
    "#Print update to ensure that the script is progressing properly\n",
    "print(\"R2: {:.2f} Alpha: {} l1_ratio: {}\"\n",
    "      .format(result.score(scale_df[x_vars],scale_df[y]),\n",
    "              result.alpha_, result.l1_ratio_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Record the overall R squared score and optimal alpha \n",
    "# and l1 ratio values and store them in the output dictionary\n",
    "\n",
    "\n",
    "Y_D[y]['Total R2'] = result.score(scale_df[x_vars],scale_df[y])\n",
    "Y_D[y]['Alpha'] = opt_alpha\n",
    "Y_D[y]['l1_ratio'] = opt_l1_ratio\n",
    "\n",
    "#Create a list R2s to store out of sample R squared values\n",
    "\n",
    "R2s = []\n",
    "\n",
    "#Specify the number of trials to run\n",
    "\n",
    "trials = 10\n",
    "\n",
    "#Run the number of trials specified in trials, \n",
    "#for each trial 34% of the observations are randomly selected to train the model\n",
    "#Testing is done on the remaining 66% of observations and the R squared values are recorded\n",
    "\n",
    "for i in range(trials):    \n",
    "    X_train, X_test, y_train, y_test = train_test_split(scale_df[x_vars], scale_df[y], test_size=0.66)\n",
    "    test_regr = ElasticNetCV(max_iter=1e8,\n",
    "                    alphas = [opt_alpha],\n",
    "                    l1_ratio =[opt_l1_ratio],\n",
    "                    n_jobs = -1, \n",
    "                    cv=5, \n",
    "                    selection = 'random',\n",
    "                    fit_intercept=False)\n",
    "    test_regr.fit(X_train,y_train)\n",
    "    R2s.append(test_regr.score(X_test,y_test))\n",
    "\n",
    "#print(\"Mean R2: {:.2f} StDev: {:.4f}\".format(mean(R2s),pstdev(R2s)))\n",
    "#Record the out of sample R squared values\n",
    "Y_D[y]['Sampling']={'trials':trials,'R2':mean(R2s),'StDev':pstdev(R2s),'R2s':R2s}\n",
    "coefs = [i for i in zip(list(scale_df[x_vars].axes[1]),result.coef_)]\n",
    "remaining = [i for i in coefs if abs(i[1])>0.0]\n",
    "Y_D[y][\"Coefficients\"]=remaining"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Total R2': 0.52223958711905671,\n",
       " 'Alpha': 0.10000000000000001,\n",
       " 'l1_ratio': 0.10000000000000001,\n",
       " 'Sampling': {'trials': 10,\n",
       "  'R2': 0.50428832946257485,\n",
       "  'StDev': 0.015999016463323752,\n",
       "  'R2s': [0.48373046690804533,\n",
       "   0.50244508288476331,\n",
       "   0.53382379659923518,\n",
       "   0.4967710470426569,\n",
       "   0.49778049585319206,\n",
       "   0.49086573661559485,\n",
       "   0.50323328463773997,\n",
       "   0.52117336777158052,\n",
       "   0.48800944024964804,\n",
       "   0.5250505760632922]},\n",
       " 'Coefficients': [('orb_sc31_kurtosis_sum', -0.013175924082781293),\n",
       "  ('orb_sc31_skew_sum', -0.022884017556215552),\n",
       "  ('ndvi_sc3_variance_sum', -0.012964193437172573),\n",
       "  ('pantex_sc3_min_sum', -0.0045114478456768818),\n",
       "  ('hog_sc7_kurtosis_sum', -0.13652531518792824),\n",
       "  ('pantex_sc5_min_sum', -0.0094370079010896203),\n",
       "  ('hog_sc5_kurtosis_sum', -0.069386805457238215),\n",
       "  ('pantex_sc7_min_sum', -0.0043606055927244997),\n",
       "  ('orb_sc71_mean_mean', 0.049174425074681352),\n",
       "  ('orb_sc71_max_mean', 0.067486883326390176),\n",
       "  ('orb_sc51_max_mean', 0.015278655364894913),\n",
       "  ('pantex_sc5_min_std', -0.013051820949735563),\n",
       "  ('pantex_sc7_min_std', -0.049549117287079537),\n",
       "  ('fourier_v2_sc71_mean_mean', 0.080661521210344048),\n",
       "  ('mean_sc3_variance_mean', 0.010968827274030013),\n",
       "  ('ndvi_sc3_mean_mean', -0.10135143645022632),\n",
       "  ('ndvi_sc5_mean_mean', -0.1000543802416493),\n",
       "  ('ndvi_sc7_mean_mean', -0.098624538986895882),\n",
       "  ('fourier_v2_sc51_mean_mean', 0.059858831566121484),\n",
       "  ('fourier_v2_sc31_mean_mean', 0.051632009526299649),\n",
       "  ('orb_sc71_variance_mean', 0.010710117830666908),\n",
       "  ('orb_sc51_skew_std', -0.0035908526803277003),\n",
       "  ('hog_sc7_kurtosis_mean', 0.10377345355396042),\n",
       "  ('hog_sc3_kurtosis_mean', 0.0052948025895639475),\n",
       "  ('hog_sc5_kurtosis_mean', 0.018180060110203011),\n",
       "  ('sfs_sc31_max_ll_std', -0.061365688545883056),\n",
       "  ('hog_sc7_skew_mean', 0.052995644497690682),\n",
       "  ('ndvi_sc7_mean_sum', 0.0078871355970312126),\n",
       "  ('ndvi_sc5_mean_sum', 0.0075990674669600298),\n",
       "  ('ndvi_sc3_mean_sum', 0.0075751074834691234),\n",
       "  ('ndvi_sc5_variance_sum', 0.039158113681985601),\n",
       "  ('lac_sc3_lac_mean', 0.051045789481229072),\n",
       "  ('lac_sc7_lac_mean', 0.051168899546303735),\n",
       "  ('lac_sc5_lac_mean', 0.051154635829583787),\n",
       "  ('ndvi_sc7_variance_sum', 0.053333831249005932),\n",
       "  ('sfs_sc31_std_std', -0.012305660987427077),\n",
       "  ('hog_sc3_kurtosis_std', 0.017497376491661509),\n",
       "  ('sfs_sc51_w_mean_mean', -0.025573992731394234),\n",
       "  ('lbpm_sc5_kurtosis_mean', -0.0014216285348269432),\n",
       "  ('gabor_sc5_filter_2_std', -0.00083531671726575722),\n",
       "  ('gabor_sc5_variance_std', -0.017280674447910423),\n",
       "  ('sfs_sc51_roa_mean', -0.0073771534355332275),\n",
       "  ('lbpm_sc5_max_mean', 0.045235129075313393),\n",
       "  ('lbpm_sc3_mean_mean', -0.073865921295961326),\n",
       "  ('lbpm_sc5_skew_mean', -0.016354541163073066),\n",
       "  ('lbpm_sc3_variance_std', 0.034612318383439505),\n",
       "  ('gabor_sc5_filter_14_std', -0.03173516076730333),\n",
       "  ('lac_sc3_lac_std', -0.02416458409419912),\n",
       "  ('lac_sc7_lac_std', -0.024155951300554701),\n",
       "  ('lac_sc5_lac_std', -0.024169997633723468),\n",
       "  ('lbpm_sc7_kurtosis_mean', -0.059668426444220289),\n",
       "  ('mean_sc7_variance_std', -0.054569846306932387)]}"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_vars = y_var\n",
    "Y_D[y_var]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
